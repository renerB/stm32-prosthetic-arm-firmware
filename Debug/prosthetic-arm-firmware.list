
prosthetic-arm-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b8c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cdc  08003cdc  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003cdc  08003cdc  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cdc  08003cdc  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ce0  08003ce0  00004ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003ce4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08003cf4  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003cf4  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a285  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4d  00000000  00000000  0000f2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00011110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f1  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173f9  00000000  00000000  00012591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2d5  00000000  00000000  0002998a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896a2  00000000  00000000  00036c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000c0344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c33e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c84 	.word	0x08003c84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003c84 	.word	0x08003c84

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 fc98 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f87a 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 fa3e 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 800093c:	f000 fa1e 	bl	8000d7c <MX_DMA_Init>
  MX_TIM2_Init();
 8000940:	f000 f90e 	bl	8000b60 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000944:	f000 f8ce 	bl	8000ae4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000948:	f000 f996 	bl	8000c78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	482f      	ldr	r0, [pc, #188]	@ (8000a0c <main+0xe0>)
 8000950:	f002 fc3e 	bl	80031d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	482d      	ldr	r0, [pc, #180]	@ (8000a0c <main+0xe0>)
 8000958:	f002 fc3a 	bl	80031d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800095c:	210c      	movs	r1, #12
 800095e:	482b      	ldr	r0, [pc, #172]	@ (8000a0c <main+0xe0>)
 8000960:	f002 fc36 	bl	80031d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000964:	2100      	movs	r1, #0
 8000966:	482a      	ldr	r0, [pc, #168]	@ (8000a10 <main+0xe4>)
 8000968:	f002 fc32 	bl	80031d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800096c:	2104      	movs	r1, #4
 800096e:	4828      	ldr	r0, [pc, #160]	@ (8000a10 <main+0xe4>)
 8000970:	f002 fc2e 	bl	80031d0 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000974:	4827      	ldr	r0, [pc, #156]	@ (8000a14 <main+0xe8>)
 8000976:	f001 f8bd 	bl	8001af4 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(mode == 0){
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <main+0xec>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d117      	bne.n	80009b2 <main+0x86>
		  TIM2->CCR1=dc;
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <main+0xf0>)
 8000984:	881a      	ldrh	r2, [r3, #0]
 8000986:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM2->CCR2=dc;
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <main+0xf0>)
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM2->CCR4=dc;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <main+0xf0>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800099e:	641a      	str	r2, [r3, #64]	@ 0x40
		  TIM3->CCR1=dc;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <main+0xf0>)
 80009a2:	881a      	ldrh	r2, [r3, #0]
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <main+0xf4>)
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR2=dc;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <main+0xf0>)
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <main+0xf4>)
 80009ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80009b0:	e011      	b.n	80009d6 <main+0xaa>
	  } else {
		  TIM2->CCR1=0;
 80009b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM2->CCR2=0;
 80009ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009be:	2200      	movs	r2, #0
 80009c0:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM2->CCR4=0;
 80009c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c6:	2200      	movs	r2, #0
 80009c8:	641a      	str	r2, [r3, #64]	@ 0x40
		  TIM3->CCR1=0;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <main+0xf4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR2=0;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <main+0xf4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
	  }


	  HAL_ADC_Start_DMA(&hadc1, &adc_result, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4912      	ldr	r1, [pc, #72]	@ (8000a24 <main+0xf8>)
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <main+0xe8>)
 80009dc:	f000 fda0 	bl	8001520 <HAL_ADC_Start_DMA>

	  if(adc_result >= 2000){
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <main+0xf8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80009e8:	d306      	bcc.n	80009f8 <main+0xcc>
		  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <main+0xfc>)
 80009f2:	f001 fdad 	bl	8002550 <HAL_GPIO_WritePin>
 80009f6:	e005      	b.n	8000a04 <main+0xd8>
	  } else {
		  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <main+0xfc>)
 8000a00:	f001 fda6 	bl	8002550 <HAL_GPIO_WritePin>
	  }


	  HAL_Delay(100);
 8000a04:	2064      	movs	r0, #100	@ 0x64
 8000a06:	f000 fc8f 	bl	8001328 <HAL_Delay>
	  if(mode == 0){
 8000a0a:	e7b6      	b.n	800097a <main+0x4e>
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	200000e8 	.word	0x200000e8
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	20000134 	.word	0x20000134
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	40000400 	.word	0x40000400
 8000a24:	20000130 	.word	0x20000130
 8000a28:	40011000 	.word	0x40011000

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a36:	2228      	movs	r2, #40	@ 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f8f6 	bl	8003c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a78:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fd94 	bl	80025b0 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a8e:	f000 fa5f 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f800 	bl	8002ab4 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000aba:	f000 fa49 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000ac2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f96c 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ad6:	f000 fa3b 	bl	8000f50 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	@ 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000af6:	4a19      	ldr	r2, [pc, #100]	@ (8000b5c <MX_ADC1_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b0e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b14:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b22:	f000 fc25 	bl	8001370 <HAL_ADC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 fa10 	bl	8000f50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_ADC1_Init+0x74>)
 8000b42:	f000 fddd 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b4c:	f000 fa00 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000002c 	.word	0x2000002c
 8000b5c:	40012400 	.word	0x40012400

08000b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b90:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000b98:	4b36      	ldr	r3, [pc, #216]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000b9a:	228f      	movs	r2, #143	@ 0x8f
 8000b9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b35      	ldr	r3, [pc, #212]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ba4:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000ba6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b31      	ldr	r3, [pc, #196]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb8:	482e      	ldr	r0, [pc, #184]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000bba:	f002 fa61 	bl	8003080 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 f9c4 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000bd6:	f002 fc5f 	bl	8003498 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000be0:	f000 f9b6 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be4:	4823      	ldr	r0, [pc, #140]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000be6:	f002 fa9a 	bl	800311e <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bf0:	f000 f9ae 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4619      	mov	r1, r3
 8000c02:	481c      	ldr	r0, [pc, #112]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000c04:	f002 ffb4 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c0e:	f000 f99f 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	@ 0x60
 8000c14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4812      	ldr	r0, [pc, #72]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000c2a:	f002 fb73 	bl	8003314 <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c34:	f000 f98c 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000c40:	f002 fb68 	bl	8003314 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c4a:	f000 f981 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	220c      	movs	r2, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000c56:	f002 fb5d 	bl	8003314 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000c60:	f000 f976 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM2_Init+0x114>)
 8000c66:	f000 fa43 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	@ 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000a0 	.word	0x200000a0

08000c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca8:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000caa:	4a33      	ldr	r2, [pc, #204]	@ (8000d78 <MX_TIM3_Init+0x100>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 8000cae:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cb0:	228f      	movs	r2, #143	@ 0x8f
 8000cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cbc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cce:	4829      	ldr	r0, [pc, #164]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cd0:	f002 f9d6 	bl	8003080 <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cda:	f000 f939 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cec:	f002 fbd4 	bl	8003498 <HAL_TIM_ConfigClockSource>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cf6:	f000 f92b 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cfa:	481e      	ldr	r0, [pc, #120]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000cfc:	f002 fa0f 	bl	800311e <HAL_TIM_PWM_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d06:	f000 f923 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	4619      	mov	r1, r3
 8000d18:	4816      	ldr	r0, [pc, #88]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000d1a:	f002 ff29 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d24:	f000 f914 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2360      	movs	r3, #96	@ 0x60
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000d40:	f002 fae8 	bl	8003314 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d4a:	f000 f901 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2204      	movs	r2, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000d56:	f002 fadd 	bl	8003314 <HAL_TIM_PWM_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d60:	f000 f8f6 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM3_Init+0xfc>)
 8000d66:	f000 f9c3 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	@ 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000e8 	.word	0x200000e8
 8000d78:	40000400 	.word	0x40000400

08000d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_DMA_Init+0x38>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	200b      	movs	r0, #11
 8000da0:	f001 f82d 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000da4:	200b      	movs	r0, #11
 8000da6:	f001 f846 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a27      	ldr	r2, [pc, #156]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1b      	ldr	r2, [pc, #108]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_GPIO_Init+0xd0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e32:	4816      	ldr	r0, [pc, #88]	@ (8000e8c <MX_GPIO_Init+0xd4>)
 8000e34:	f001 fb8c 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <MX_GPIO_Init+0xd4>)
 8000e52:	f001 f9f9 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 8000e56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_GPIO_Init+0xd8>)
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480a      	ldr	r0, [pc, #40]	@ (8000e94 <MX_GPIO_Init+0xdc>)
 8000e6c:	f001 f9ec 	bl	8002248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2028      	movs	r0, #40	@ 0x28
 8000e76:	f000 ffc2 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	@ 0x28
 8000e7c:	f000 ffdb 	bl	8001e36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	10210000 	.word	0x10210000
 8000e94:	40010c00 	.word	0x40010c00

08000e98 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
	dc = ((adc_result/4095.0)*(MAX_DUTY_CICLE-MIN_DUTY_CICLE)) + MIN_DUTY_CICLE;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_ADC_ConvCpltCallback+0x70>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa95 	bl	80003d4 <__aeabi_ui2d>
 8000eaa:	a313      	add	r3, pc, #76	@ (adr r3, 8000ef8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff fc34 	bl	800071c <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_ADC_ConvCpltCallback+0x74>)
 8000ec2:	f7ff fb01 	bl	80004c8 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	a30c      	add	r3, pc, #48	@ (adr r3, 8000f00 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff f942 	bl	800015c <__adddf3>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fd04 	bl	80008ec <__aeabi_d2uiz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <HAL_ADC_ConvCpltCallback+0x78>)
 8000eea:	801a      	strh	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40affe00 	.word	0x40affe00
 8000f00:	00000000 	.word	0x00000000
 8000f04:	4072c000 	.word	0x4072c000
 8000f08:	20000130 	.word	0x20000130
 8000f0c:	408c2000 	.word	0x408c2000
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_PIN_Pin){
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f24:	d10c      	bne.n	8000f40 <HAL_GPIO_EXTI_Callback+0x2c>
		mode++;
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x38>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x38>)
 8000f30:	701a      	strb	r2, [r3, #0]
		if(mode > 1){
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x38>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d902      	bls.n	8000f40 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 0;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x38>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000134 	.word	0x20000134

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_MspInit+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <HAL_MspInit+0x60>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a28      	ldr	r2, [pc, #160]	@ (800107c <HAL_ADC_MspInit+0xbc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d149      	bne.n	8001074 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001010:	2310      	movs	r3, #16
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4819      	ldr	r0, [pc, #100]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 8001020:	f001 f912 	bl	8002248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001026:	4a19      	ldr	r2, [pc, #100]	@ (800108c <HAL_ADC_MspInit+0xcc>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 800103e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001042:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800104a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 800105a:	f000 ff07 	bl	8001e6c <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001064:	f7ff ff74 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800
 8001088:	2000005c 	.word	0x2000005c
 800108c:	40020008 	.word	0x40020008

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ba:	e010      	b.n	80010de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40000400 	.word	0x40000400

080010f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800110e:	d118      	bne.n	8001142 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001128:	230b      	movs	r3, #11
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <HAL_TIM_MspPostInit+0x98>)
 800113c:	f001 f884 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001140:	e01c      	b.n	800117c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_TIM_MspPostInit+0x9c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d117      	bne.n	800117c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_TIM_MspPostInit+0x94>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23c0      	movs	r3, #192	@ 0xc0
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4804      	ldr	r0, [pc, #16]	@ (8001188 <HAL_TIM_MspPostInit+0x98>)
 8001178:	f001 f866 	bl	8002248 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	40000400 	.word	0x40000400

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <NMI_Handler+0x4>

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <MemManage_Handler+0x4>

080011a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f886 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ee:	f000 fef7 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000005c 	.word	0x2000005c

080011fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PIN_Pin);
 8001200:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001204:	f001 f9bc 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001218:	f7ff fff8 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800121e:	490c      	ldr	r1, [pc, #48]	@ (8001250 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001220:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001234:	4c09      	ldr	r4, [pc, #36]	@ (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f002 fcfb 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001246:	f7ff fb71 	bl	800092c <main>
  bx lr
 800124a:	4770      	bx	lr
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001254:	08003ce4 	.word	0x08003ce4
  ldr r2, =_sbss
 8001258:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800125c:	2000013c 	.word	0x2000013c

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 fdb7 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fe6c 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fdcf 	bl	8001e52 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 fd97 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000004 	.word	0x20000004
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a03      	ldr	r2, [pc, #12]	@ (8001310 <HAL_IncTick+0x20>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000138 	.word	0x20000138

08001314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000138 	.word	0x20000138

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000000c 	.word	0x2000000c

08001370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0be      	b.n	8001510 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe06 	bl	8000fc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 faf5 	bl	80019a4 <ADC_ConversionStop_Disable>
 80013ba:	4603      	mov	r3, r0
 80013bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8099 	bne.w	80014fe <HAL_ADC_Init+0x18e>
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f040 8095 	bne.w	80014fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013dc:	f023 0302 	bic.w	r3, r3, #2
 80013e0:	f043 0202 	orr.w	r2, r3, #2
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7b1b      	ldrb	r3, [r3, #12]
 80013f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001408:	d003      	beq.n	8001412 <HAL_ADC_Init+0xa2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_ADC_Init+0xa8>
 8001412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001416:	e000      	b.n	800141a <HAL_ADC_Init+0xaa>
 8001418:	2300      	movs	r3, #0
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7d1b      	ldrb	r3, [r3, #20]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d119      	bne.n	800145c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7b1b      	ldrb	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	3b01      	subs	r3, #1
 8001436:	035a      	lsls	r2, r3, #13
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e00b      	b.n	800145c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	f043 0220 	orr.w	r2, r3, #32
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <HAL_ADC_Init+0x1a8>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	430b      	orrs	r3, r1
 8001482:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800148c:	d003      	beq.n	8001496 <HAL_ADC_Init+0x126>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d104      	bne.n	80014a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	3b01      	subs	r3, #1
 800149c:	051b      	lsls	r3, r3, #20
 800149e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_ADC_Init+0x1ac>)
 80014bc:	4013      	ands	r3, r2
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d10b      	bne.n	80014dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014da:	e018      	b.n	800150e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	f023 0312 	bic.w	r3, r3, #18
 80014e4:	f043 0210 	orr.w	r2, r3, #16
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014fc:	e007      	b.n	800150e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	f043 0210 	orr.w	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800150e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	ffe1f7fd 	.word	0xffe1f7fd
 800151c:	ff1f0efe 	.word	0xff1f0efe

08001520 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a64      	ldr	r2, [pc, #400]	@ (80016c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d004      	beq.n	8001544 <HAL_ADC_Start_DMA+0x24>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a63      	ldr	r2, [pc, #396]	@ (80016cc <HAL_ADC_Start_DMA+0x1ac>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d106      	bne.n	8001552 <HAL_ADC_Start_DMA+0x32>
 8001544:	4b60      	ldr	r3, [pc, #384]	@ (80016c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 80b3 	bne.w	80016b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_ADC_Start_DMA+0x40>
 800155c:	2302      	movs	r3, #2
 800155e:	e0ae      	b.n	80016be <HAL_ADC_Start_DMA+0x19e>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f9c1 	bl	80018f0 <ADC_Enable>
 800156e:	4603      	mov	r3, r0
 8001570:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f040 809a 	bne.w	80016ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a4e      	ldr	r2, [pc, #312]	@ (80016cc <HAL_ADC_Start_DMA+0x1ac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d105      	bne.n	80015a4 <HAL_ADC_Start_DMA+0x84>
 8001598:	4b4b      	ldr	r3, [pc, #300]	@ (80016c8 <HAL_ADC_Start_DMA+0x1a8>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d115      	bne.n	80015d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d026      	beq.n	800160c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ce:	e01d      	b.n	800160c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a39      	ldr	r2, [pc, #228]	@ (80016c8 <HAL_ADC_Start_DMA+0x1a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d004      	beq.n	80015f0 <HAL_ADC_Start_DMA+0xd0>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a38      	ldr	r2, [pc, #224]	@ (80016cc <HAL_ADC_Start_DMA+0x1ac>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10d      	bne.n	800160c <HAL_ADC_Start_DMA+0xec>
 80015f0:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HAL_ADC_Start_DMA+0x1a8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001604:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	f023 0206 	bic.w	r2, r3, #6
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001624:	e002      	b.n	800162c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a25      	ldr	r2, [pc, #148]	@ (80016d0 <HAL_ADC_Start_DMA+0x1b0>)
 800163a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_ADC_Start_DMA+0x1b4>)
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a23      	ldr	r2, [pc, #140]	@ (80016d8 <HAL_ADC_Start_DMA+0x1b8>)
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0202 	mvn.w	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001664:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a18      	ldr	r0, [r3, #32]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	334c      	adds	r3, #76	@ 0x4c
 8001670:	4619      	mov	r1, r3
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f000 fc53 	bl	8001f20 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001684:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001688:	d108      	bne.n	800169c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001698:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800169a:	e00f      	b.n	80016bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016ac:	e006      	b.n	80016bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80016b6:	e001      	b.n	80016bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40012400 	.word	0x40012400
 80016cc:	40012800 	.word	0x40012800
 80016d0:	08001a27 	.word	0x08001a27
 80016d4:	08001aa3 	.word	0x08001aa3
 80016d8:	08001abf 	.word	0x08001abf

080016dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e0dc      	b.n	80018da <HAL_ADC_ConfigChannel+0x1da>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b06      	cmp	r3, #6
 800172e:	d81c      	bhi.n	800176a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b05      	subs	r3, #5
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b05      	subs	r3, #5
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
 8001768:	e03c      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d81c      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b23      	subs	r3, #35	@ 0x23
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	4019      	ands	r1, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	3b23      	subs	r3, #35	@ 0x23
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80017aa:	e01b      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b41      	subs	r3, #65	@ 0x41
 80017be:	221f      	movs	r2, #31
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b41      	subs	r3, #65	@ 0x41
 80017d8:	fa00 f203 	lsl.w	r2, r0, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d91c      	bls.n	8001826 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1e      	subs	r3, #30
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	3b1e      	subs	r3, #30
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	e019      	b.n	800185a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6919      	ldr	r1, [r3, #16]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b10      	cmp	r3, #16
 8001860:	d003      	beq.n	800186a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001866:	2b11      	cmp	r3, #17
 8001868:	d132      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d125      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d126      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001890:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d11a      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a13      	ldr	r2, [pc, #76]	@ (80018ec <HAL_ADC_ConfigChannel+0x1ec>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9a      	lsrs	r2, r3, #18
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1b2>
 80018be:	e007      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40012400 	.word	0x40012400
 80018e8:	20000004 	.word	0x20000004
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d040      	beq.n	8001990 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <ADC_Enable+0xac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <ADC_Enable+0xb0>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800192c:	e002      	b.n	8001934 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800193a:	f7ff fceb 	bl	8001314 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001940:	e01f      	b.n	8001982 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001942:	f7ff fce7 	bl	8001314 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d918      	bls.n	8001982 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d011      	beq.n	8001982 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e007      	b.n	8001992 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d1d8      	bne.n	8001942 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000004 	.word	0x20000004
 80019a0:	431bde83 	.word	0x431bde83

080019a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d12e      	bne.n	8001a1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ce:	f7ff fca1 	bl	8001314 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d4:	e01b      	b.n	8001a0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d6:	f7ff fc9d 	bl	8001314 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d914      	bls.n	8001a0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10d      	bne.n	8001a0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f043 0210 	orr.w	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e007      	b.n	8001a1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d0dc      	beq.n	80019d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d127      	bne.n	8001a90 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a56:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a5a:	d115      	bne.n	8001a88 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fa05 	bl	8000e98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a8e:	e004      	b.n	8001a9a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fe13 	bl	80016dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	f043 0204 	orr.w	r2, r3, #4
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff fe02 	bl	80016ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADCEx_Calibration_Start+0x1e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e097      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff42 	bl	80019a4 <ADC_ConversionStop_Disable>
 8001b20:	4603      	mov	r3, r0
 8001b22:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fee3 	bl	80018f0 <ADC_Enable>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 8081 	bne.w	8001c38 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b3e:	f023 0302 	bic.w	r3, r3, #2
 8001b42:	f043 0202 	orr.w	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_ADCEx_Calibration_Start+0x158>)
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f001 f9e0 	bl	8002f14 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b54:	4603      	mov	r3, r0
 8001b56:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b5a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001b5c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001b5e:	e002      	b.n	8001b66 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b7c:	f7ff fbca 	bl	8001314 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b82:	e01b      	b.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b84:	f7ff fbc6 	bl	8001314 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d914      	bls.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f023 0312 	bic.w	r3, r3, #18
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e042      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1dc      	bne.n	8001b84 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0204 	orr.w	r2, r2, #4
 8001bd8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bda:	f7ff fb9b 	bl	8001314 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001be0:	e01b      	b.n	8001c1a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be2:	f7ff fb97 	bl	8001314 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b0a      	cmp	r3, #10
 8001bee:	d914      	bls.n	8001c1a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	f023 0312 	bic.w	r3, r3, #18
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e013      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1dc      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	f023 0303 	bic.w	r3, r3, #3
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000004 	.word	0x20000004

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	@ (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	@ (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	@ (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff42 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff90 	bl	8001d40 <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5f 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff35 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e043      	b.n	8001f0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <HAL_DMA_Init+0xa8>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <HAL_DMA_Init+0xac>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	009a      	lsls	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_DMA_Init+0xb0>)
 8001e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001eba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	bffdfff8 	.word	0xbffdfff8
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Start_IT+0x20>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e04b      	b.n	8001fd8 <HAL_DMA_Start_IT+0xb8>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d13a      	bne.n	8001fca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f937 	bl	80021ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 020e 	orr.w	r2, r2, #14
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e00f      	b.n	8001fb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 020a 	orr.w	r2, r2, #10
 8001fb6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e005      	b.n	8001fd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d04f      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xc8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d04a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a66      	ldr	r2, [pc, #408]	@ (80021d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d029      	beq.n	800208e <HAL_DMA_IRQHandler+0xae>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a65      	ldr	r2, [pc, #404]	@ (80021d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_IRQHandler+0xaa>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a63      	ldr	r2, [pc, #396]	@ (80021d8 <HAL_DMA_IRQHandler+0x1f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0xa4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a62      	ldr	r2, [pc, #392]	@ (80021dc <HAL_DMA_IRQHandler+0x1fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0x9e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a60      	ldr	r2, [pc, #384]	@ (80021e0 <HAL_DMA_IRQHandler+0x200>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x98>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5f      	ldr	r2, [pc, #380]	@ (80021e4 <HAL_DMA_IRQHandler+0x204>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d102      	bne.n	8002072 <HAL_DMA_IRQHandler+0x92>
 800206c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002070:	e00e      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 8002072:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002076:	e00b      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 8002078:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800207c:	e008      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 800207e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002082:	e005      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 8002084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002088:	e002      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 800208a:	2340      	movs	r3, #64	@ 0x40
 800208c:	e000      	b.n	8002090 <HAL_DMA_IRQHandler+0xb0>
 800208e:	2304      	movs	r3, #4
 8002090:	4a55      	ldr	r2, [pc, #340]	@ (80021e8 <HAL_DMA_IRQHandler+0x208>)
 8002092:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8094 	beq.w	80021c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020a6:	e08e      	b.n	80021c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2202      	movs	r2, #2
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d056      	beq.n	8002166 <HAL_DMA_IRQHandler+0x186>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d051      	beq.n	8002166 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020a 	bic.w	r2, r2, #10
 80020de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_DMA_IRQHandler+0x1f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d029      	beq.n	8002146 <HAL_DMA_IRQHandler+0x166>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a37      	ldr	r2, [pc, #220]	@ (80021d4 <HAL_DMA_IRQHandler+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0x162>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a35      	ldr	r2, [pc, #212]	@ (80021d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01a      	beq.n	800213c <HAL_DMA_IRQHandler+0x15c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a34      	ldr	r2, [pc, #208]	@ (80021dc <HAL_DMA_IRQHandler+0x1fc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d012      	beq.n	8002136 <HAL_DMA_IRQHandler+0x156>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a32      	ldr	r2, [pc, #200]	@ (80021e0 <HAL_DMA_IRQHandler+0x200>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x150>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a31      	ldr	r2, [pc, #196]	@ (80021e4 <HAL_DMA_IRQHandler+0x204>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_DMA_IRQHandler+0x14a>
 8002124:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002128:	e00e      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 800212a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212e:	e00b      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 8002130:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002134:	e008      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 8002136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800213a:	e005      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 800213c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002140:	e002      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 8002142:	2320      	movs	r3, #32
 8002144:	e000      	b.n	8002148 <HAL_DMA_IRQHandler+0x168>
 8002146:	2302      	movs	r3, #2
 8002148:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <HAL_DMA_IRQHandler+0x208>)
 800214a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d034      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002164:	e02f      	b.n	80021c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d028      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x1e8>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d023      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020e 	bic.w	r2, r2, #14
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
    }
  }
  return;
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
}
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40020008 	.word	0x40020008
 80021d4:	4002001c 	.word	0x4002001c
 80021d8:	40020030 	.word	0x40020030
 80021dc:	40020044 	.word	0x40020044
 80021e0:	40020058 	.word	0x40020058
 80021e4:	4002006c 	.word	0x4002006c
 80021e8:	40020000 	.word	0x40020000

080021ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
	...

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b08b      	sub	sp, #44	@ 0x2c
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e169      	b.n	8002530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800225c:	2201      	movs	r2, #1
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8158 	bne.w	800252a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a9a      	ldr	r2, [pc, #616]	@ (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d05e      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002284:	4a98      	ldr	r2, [pc, #608]	@ (80024e8 <HAL_GPIO_Init+0x2a0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d875      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 800228a:	4a98      	ldr	r2, [pc, #608]	@ (80024ec <HAL_GPIO_Init+0x2a4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d058      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 8002290:	4a96      	ldr	r2, [pc, #600]	@ (80024ec <HAL_GPIO_Init+0x2a4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d86f      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 8002296:	4a96      	ldr	r2, [pc, #600]	@ (80024f0 <HAL_GPIO_Init+0x2a8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d052      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 800229c:	4a94      	ldr	r2, [pc, #592]	@ (80024f0 <HAL_GPIO_Init+0x2a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d869      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022a2:	4a94      	ldr	r2, [pc, #592]	@ (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04c      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022a8:	4a92      	ldr	r2, [pc, #584]	@ (80024f4 <HAL_GPIO_Init+0x2ac>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d863      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ae:	4a92      	ldr	r2, [pc, #584]	@ (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d046      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
 80022b4:	4a90      	ldr	r2, [pc, #576]	@ (80024f8 <HAL_GPIO_Init+0x2b0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d85d      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d82a      	bhi.n	8002314 <HAL_GPIO_Init+0xcc>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d859      	bhi.n	8002376 <HAL_GPIO_Init+0x12e>
 80022c2:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <HAL_GPIO_Init+0x80>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	08002343 	.word	0x08002343
 80022cc:	0800231d 	.word	0x0800231d
 80022d0:	0800232f 	.word	0x0800232f
 80022d4:	08002371 	.word	0x08002371
 80022d8:	08002377 	.word	0x08002377
 80022dc:	08002377 	.word	0x08002377
 80022e0:	08002377 	.word	0x08002377
 80022e4:	08002377 	.word	0x08002377
 80022e8:	08002377 	.word	0x08002377
 80022ec:	08002377 	.word	0x08002377
 80022f0:	08002377 	.word	0x08002377
 80022f4:	08002377 	.word	0x08002377
 80022f8:	08002377 	.word	0x08002377
 80022fc:	08002377 	.word	0x08002377
 8002300:	08002377 	.word	0x08002377
 8002304:	08002377 	.word	0x08002377
 8002308:	08002377 	.word	0x08002377
 800230c:	08002325 	.word	0x08002325
 8002310:	08002339 	.word	0x08002339
 8002314:	4a79      	ldr	r2, [pc, #484]	@ (80024fc <HAL_GPIO_Init+0x2b4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231a:	e02c      	b.n	8002376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e029      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	3304      	adds	r3, #4
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e024      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e01f      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	330c      	adds	r3, #12
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e01a      	b.n	8002378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234a:	2304      	movs	r3, #4
 800234c:	623b      	str	r3, [r7, #32]
          break;
 800234e:	e013      	b.n	8002378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	611a      	str	r2, [r3, #16]
          break;
 8002362:	e009      	b.n	8002378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	615a      	str	r2, [r3, #20]
          break;
 800236e:	e003      	b.n	8002378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x130>
          break;
 8002376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	@ 0xff
 800237c:	d801      	bhi.n	8002382 <HAL_GPIO_Init+0x13a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_Init+0x13e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2bff      	cmp	r3, #255	@ 0xff
 800238c:	d802      	bhi.n	8002394 <HAL_GPIO_Init+0x14c>
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x152>
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	3b08      	subs	r3, #8
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	210f      	movs	r1, #15
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	401a      	ands	r2, r3
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b1 	beq.w	800252a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <HAL_GPIO_Init+0x2b8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e0:	4a48      	ldr	r2, [pc, #288]	@ (8002504 <HAL_GPIO_Init+0x2bc>)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <HAL_GPIO_Init+0x2c0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1ec>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3f      	ldr	r2, [pc, #252]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1e8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3e      	ldr	r2, [pc, #248]	@ (8002510 <HAL_GPIO_Init+0x2c8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	@ (8002514 <HAL_GPIO_Init+0x2cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1e0>
 8002424:	2303      	movs	r3, #3
 8002426:	e006      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002428:	2304      	movs	r3, #4
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 800242c:	2302      	movs	r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1ee>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	492f      	ldr	r1, [pc, #188]	@ (8002504 <HAL_GPIO_Init+0x2bc>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	492c      	ldr	r1, [pc, #176]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4928      	ldr	r1, [pc, #160]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4922      	ldr	r1, [pc, #136]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002496:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	491e      	ldr	r1, [pc, #120]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4918      	ldr	r1, [pc, #96]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4914      	ldr	r1, [pc, #80]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d021      	beq.n	800251c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	490e      	ldr	r1, [pc, #56]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e021      	b.n	800252a <HAL_GPIO_Init+0x2e2>
 80024e6:	bf00      	nop
 80024e8:	10320000 	.word	0x10320000
 80024ec:	10310000 	.word	0x10310000
 80024f0:	10220000 	.word	0x10220000
 80024f4:	10210000 	.word	0x10210000
 80024f8:	10120000 	.word	0x10120000
 80024fc:	10110000 	.word	0x10110000
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	40010800 	.word	0x40010800
 800250c:	40010c00 	.word	0x40010c00
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400
 8002518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_GPIO_Init+0x304>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	43db      	mvns	r3, r3
 8002524:	4909      	ldr	r1, [pc, #36]	@ (800254c <HAL_GPIO_Init+0x304>)
 8002526:	4013      	ands	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	f47f ae8e 	bne.w	800225c <HAL_GPIO_Init+0x14>
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	372c      	adds	r7, #44	@ 0x2c
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002596:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fcb8 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e272      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8087 	beq.w	80026de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d00c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025dc:	4b8f      	ldr	r3, [pc, #572]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d112      	bne.n	800260e <HAL_RCC_OscConfig+0x5e>
 80025e8:	4b8c      	ldr	r3, [pc, #560]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f6:	4b89      	ldr	r3, [pc, #548]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d06c      	beq.n	80026dc <HAL_RCC_OscConfig+0x12c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d168      	bne.n	80026dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e24c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x76>
 8002618:	4b80      	ldr	r3, [pc, #512]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a7f      	ldr	r2, [pc, #508]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e02e      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x98>
 800262e:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7a      	ldr	r2, [pc, #488]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b78      	ldr	r3, [pc, #480]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a77      	ldr	r2, [pc, #476]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0xbc>
 8002652:	4b72      	ldr	r3, [pc, #456]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a71      	ldr	r2, [pc, #452]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b6f      	ldr	r3, [pc, #444]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6e      	ldr	r2, [pc, #440]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0xd4>
 800266c:	4b6b      	ldr	r3, [pc, #428]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6a      	ldr	r2, [pc, #424]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b68      	ldr	r3, [pc, #416]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a67      	ldr	r2, [pc, #412]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002682:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fe42 	bl	8001314 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fe3e 	bl	8001314 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e200      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b5d      	ldr	r3, [pc, #372]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xe4>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe2e 	bl	8001314 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fe2a 	bl	8001314 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1ec      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	4b53      	ldr	r3, [pc, #332]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x10c>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ea:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026f6:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d11c      	bne.n	800273c <HAL_RCC_OscConfig+0x18c>
 8002702:	4b46      	ldr	r3, [pc, #280]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	4b43      	ldr	r3, [pc, #268]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x176>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1c0      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4939      	ldr	r1, [pc, #228]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	e03a      	b.n	80027b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <HAL_RCC_OscConfig+0x270>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fde3 	bl	8001314 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe fddf 	bl	8001314 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1a1      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b2d      	ldr	r3, [pc, #180]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b2a      	ldr	r3, [pc, #168]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4927      	ldr	r1, [pc, #156]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <HAL_RCC_OscConfig+0x270>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fdc2 	bl	8001314 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002794:	f7fe fdbe 	bl	8001314 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e180      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03a      	beq.n	8002834 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d019      	beq.n	80027fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <HAL_RCC_OscConfig+0x274>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7fe fda2 	bl	8001314 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fd9e 	bl	8001314 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e160      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027f2:	2001      	movs	r0, #1
 80027f4:	f000 faba 	bl	8002d6c <RCC_Delay>
 80027f8:	e01c      	b.n	8002834 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_RCC_OscConfig+0x274>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe fd88 	bl	8001314 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002806:	e00f      	b.n	8002828 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe fd84 	bl	8001314 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d908      	bls.n	8002828 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e146      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	42420000 	.word	0x42420000
 8002824:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b92      	ldr	r3, [pc, #584]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e9      	bne.n	8002808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a6 	beq.w	800298e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b8b      	ldr	r3, [pc, #556]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b88      	ldr	r3, [pc, #544]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a87      	ldr	r2, [pc, #540]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	61d3      	str	r3, [r2, #28]
 800285e:	4b85      	ldr	r3, [pc, #532]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b82      	ldr	r3, [pc, #520]	@ (8002a78 <HAL_RCC_OscConfig+0x4c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a78 <HAL_RCC_OscConfig+0x4c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a78 <HAL_RCC_OscConfig+0x4c8>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe fd45 	bl	8001314 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fd41 	bl	8001314 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	@ 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e103      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b75      	ldr	r3, [pc, #468]	@ (8002a78 <HAL_RCC_OscConfig+0x4c8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x312>
 80028b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6213      	str	r3, [r2, #32]
 80028c0:	e02d      	b.n	800291e <HAL_RCC_OscConfig+0x36e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x334>
 80028ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a69      	ldr	r2, [pc, #420]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6213      	str	r3, [r2, #32]
 80028d6:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a66      	ldr	r2, [pc, #408]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	e01c      	b.n	800291e <HAL_RCC_OscConfig+0x36e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x356>
 80028ec:	4b61      	ldr	r3, [pc, #388]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a60      	ldr	r2, [pc, #384]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x36e>
 8002906:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a5a      	ldr	r2, [pc, #360]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	4b58      	ldr	r3, [pc, #352]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe fcf5 	bl	8001314 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fcf1 	bl	8001314 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0b1      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCC_OscConfig+0x37e>
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fcdf 	bl	8001314 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fcdb 	bl	8001314 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e09b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8087 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002998:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d061      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d146      	bne.n	8002a3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	4b33      	ldr	r3, [pc, #204]	@ (8002a7c <HAL_RCC_OscConfig+0x4cc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fcaf 	bl	8001314 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fcab 	bl	8001314 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e06d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029cc:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d108      	bne.n	80029f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4921      	ldr	r1, [pc, #132]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a19      	ldr	r1, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	430b      	orrs	r3, r1
 8002a06:	491b      	ldr	r1, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fc7f 	bl	8001314 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fc7b 	bl	8001314 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e03d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x46a>
 8002a38:	e035      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fc68 	bl	8001314 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fc64 	bl	8001314 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e026      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x498>
 8002a66:	e01e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e019      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_OscConfig+0x500>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0d0      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b67      	ldr	r3, [pc, #412]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4965      	ldr	r1, [pc, #404]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a58      	ldr	r2, [pc, #352]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d040      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e073      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06b      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b39      	ldr	r3, [pc, #228]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4936      	ldr	r1, [pc, #216]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fbb6 	bl	8001314 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe fbb2 	bl	8001314 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e053      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d210      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4922      	ldr	r1, [pc, #136]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f821 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1cc>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x1d0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fb14 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08003c9c 	.word	0x08003c9c
 8002c80:	20000004 	.word	0x20000004
 8002c84:	20000008 	.word	0x20000008

08002c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x36>
 8002cb6:	e027      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cba:	613b      	str	r3, [r7, #16]
      break;
 8002cbc:	e027      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cd6:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	0c5b      	lsrs	r3, r3, #17
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	4a11      	ldr	r2, [pc, #68]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cea:	fb03 f202 	mul.w	r2, r3, r2
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e004      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	613b      	str	r3, [r7, #16]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0a:	613b      	str	r3, [r7, #16]
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	693b      	ldr	r3, [r7, #16]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	007a1200 	.word	0x007a1200
 8002d24:	08003cb4 	.word	0x08003cb4
 8002d28:	08003cc4 	.word	0x08003cc4
 8002d2c:	003d0900 	.word	0x003d0900

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b02      	ldr	r3, [pc, #8]	@ (8002d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff fff2 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	@ (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08003cac 	.word	0x08003cac

08002d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <RCC_Delay+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <RCC_Delay+0x38>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a5b      	lsrs	r3, r3, #9
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d88:	bf00      	nop
  }
  while (Delay --);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	60fa      	str	r2, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <RCC_Delay+0x1c>
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000004 	.word	0x20000004
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07d      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10d      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b49      	ldr	r3, [pc, #292]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b46      	ldr	r3, [pc, #280]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfc:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fa84 	bl	8001314 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	e008      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7fe fa80 	bl	8001314 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	@ 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e06d      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2e:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02e      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d027      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e62:	4a29      	ldr	r2, [pc, #164]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fa4f 	bl	8001314 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fa4b 	bl	8001314 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e036      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4917      	ldr	r1, [pc, #92]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	490b      	ldr	r1, [pc, #44]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eea:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4904      	ldr	r1, [pc, #16]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420440 	.word	0x42420440

08002f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	f200 808a 	bhi.w	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d045      	beq.n	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d075      	beq.n	8003036 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f4a:	e082      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f4c:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f52:	4b45      	ldr	r3, [pc, #276]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07b      	beq.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a41      	ldr	r2, [pc, #260]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d015      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f76:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	4a3b      	ldr	r2, [pc, #236]	@ (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f90:	4a38      	ldr	r2, [pc, #224]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e004      	b.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4a34      	ldr	r2, [pc, #208]	@ (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fac:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	61bb      	str	r3, [r7, #24]
      break;
 8002fbe:	e04a      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
      break;
 8002fce:	e042      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e01f      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffe:	d109      	bne.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800300c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e00f      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800301e:	d11c      	bne.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d016      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800302c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003030:	61bb      	str	r3, [r7, #24]
      break;
 8003032:	e012      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003034:	e011      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003036:	f7ff fe85 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0b9b      	lsrs	r3, r3, #14
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	3301      	adds	r3, #1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	61bb      	str	r3, [r7, #24]
      break;
 8003050:	e004      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800305a:	bf00      	nop
    }
  }
  return (frequency);
 800305c:	69bb      	ldr	r3, [r7, #24]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	08003cc8 	.word	0x08003cc8
 8003070:	08003cd8 	.word	0x08003cd8
 8003074:	007a1200 	.word	0x007a1200
 8003078:	003d0900 	.word	0x003d0900
 800307c:	aaaaaaab 	.word	0xaaaaaaab

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e041      	b.n	8003116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fff2 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fab2 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e041      	b.n	80031b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f839 	bl	80031bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 fa63 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_TIM_PWM_Start+0x24>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e022      	b.n	800323a <HAL_TIM_PWM_Start+0x6a>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d109      	bne.n	800320e <HAL_TIM_PWM_Start+0x3e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e015      	b.n	800323a <HAL_TIM_PWM_Start+0x6a>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d109      	bne.n	8003228 <HAL_TIM_PWM_Start+0x58>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e008      	b.n	800323a <HAL_TIM_PWM_Start+0x6a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e05e      	b.n	8003300 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_TIM_PWM_Start+0x82>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003250:	e013      	b.n	800327a <HAL_TIM_PWM_Start+0xaa>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d104      	bne.n	8003262 <HAL_TIM_PWM_Start+0x92>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003260:	e00b      	b.n	800327a <HAL_TIM_PWM_Start+0xaa>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0xa2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003270:	e003      	b.n	800327a <HAL_TIM_PWM_Start+0xaa>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fc50 	bl	8003b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_TIM_PWM_Start+0x138>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_TIM_PWM_Start+0x138>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_PWM_Start+0xfa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_PWM_Start+0xfa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a14      	ldr	r2, [pc, #80]	@ (800330c <HAL_TIM_PWM_Start+0x13c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_PWM_Start+0xfa>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <HAL_TIM_PWM_Start+0x140>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d111      	bne.n	80032ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d010      	beq.n	80032fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	e007      	b.n	80032fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800

08003314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800332e:	2302      	movs	r3, #2
 8003330:	e0ae      	b.n	8003490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	f200 809f 	bhi.w	8003480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003342:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	0800337d 	.word	0x0800337d
 800334c:	08003481 	.word	0x08003481
 8003350:	08003481 	.word	0x08003481
 8003354:	08003481 	.word	0x08003481
 8003358:	080033bd 	.word	0x080033bd
 800335c:	08003481 	.word	0x08003481
 8003360:	08003481 	.word	0x08003481
 8003364:	08003481 	.word	0x08003481
 8003368:	080033ff 	.word	0x080033ff
 800336c:	08003481 	.word	0x08003481
 8003370:	08003481 	.word	0x08003481
 8003374:	08003481 	.word	0x08003481
 8003378:	0800343f 	.word	0x0800343f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f9b2 	bl	80036ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0208 	orr.w	r2, r2, #8
 8003396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6999      	ldr	r1, [r3, #24]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	619a      	str	r2, [r3, #24]
      break;
 80033ba:	e064      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f9f8 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6999      	ldr	r1, [r3, #24]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	021a      	lsls	r2, r3, #8
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	619a      	str	r2, [r3, #24]
      break;
 80033fc:	e043      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fa41 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0208 	orr.w	r2, r2, #8
 8003418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0204 	bic.w	r2, r2, #4
 8003428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69d9      	ldr	r1, [r3, #28]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	61da      	str	r2, [r3, #28]
      break;
 800343c:	e023      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa8b 	bl	8003960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69d9      	ldr	r1, [r3, #28]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	021a      	lsls	r2, r3, #8
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	61da      	str	r2, [r3, #28]
      break;
 800347e:	e002      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
      break;
 8003484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0b4      	b.n	800361e <HAL_TIM_ConfigClockSource+0x186>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ec:	d03e      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xd4>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	f200 8087 	bhi.w	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fa:	f000 8086 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x172>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	d87f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b70      	cmp	r3, #112	@ 0x70
 8003506:	d01a      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xa6>
 8003508:	2b70      	cmp	r3, #112	@ 0x70
 800350a:	d87b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b60      	cmp	r3, #96	@ 0x60
 800350e:	d050      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003510:	2b60      	cmp	r3, #96	@ 0x60
 8003512:	d877      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b50      	cmp	r3, #80	@ 0x50
 8003516:	d03c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0xfa>
 8003518:	2b50      	cmp	r3, #80	@ 0x50
 800351a:	d873      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	d058      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d86f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b30      	cmp	r3, #48	@ 0x30
 8003526:	d064      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b30      	cmp	r3, #48	@ 0x30
 800352a:	d86b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d060      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d867      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d05a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	e062      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800354e:	f000 facc 	bl	8003aea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
      break;
 800356a:	e04f      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800357c:	f000 fab5 	bl	8003aea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800358e:	609a      	str	r2, [r3, #8]
      break;
 8003590:	e03c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 fa2c 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2150      	movs	r1, #80	@ 0x50
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa83 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80035b0:	e02c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 fa4a 	bl	8003a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2160      	movs	r1, #96	@ 0x60
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa73 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80035d0:	e01c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 fa0c 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2140      	movs	r1, #64	@ 0x40
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa63 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80035f0:	e00c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 fa5a 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 8003602:	e003      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e000      	b.n	800360c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800360a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <TIM_Base_SetConfig+0xb8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0x30>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x30>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <TIM_Base_SetConfig+0xbc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x30>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a25      	ldr	r2, [pc, #148]	@ (80036e8 <TIM_Base_SetConfig+0xc0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1c      	ldr	r2, [pc, #112]	@ (80036e0 <TIM_Base_SetConfig+0xb8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0x62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <TIM_Base_SetConfig+0xbc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0x62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <TIM_Base_SetConfig+0xc0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <TIM_Base_SetConfig+0xb8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800

080036ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10c      	bne.n	8003762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d113      	bne.n	8003936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0f      	ldr	r2, [pc, #60]	@ (80039f8 <TIM_OC4_SetConfig+0x98>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d109      	bne.n	80039d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00

080039fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 030a 	bic.w	r3, r3, #10
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	031b      	lsls	r3, r3, #12
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f043 0307 	orr.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e046      	b.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd4:	d009      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a10      	ldr	r2, [pc, #64]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10c      	bne.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800

08003c2c <memset>:
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4402      	add	r2, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2600      	movs	r6, #0
 8003c40:	4d0c      	ldr	r5, [pc, #48]	@ (8003c74 <__libc_init_array+0x38>)
 8003c42:	4c0d      	ldr	r4, [pc, #52]	@ (8003c78 <__libc_init_array+0x3c>)
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	f000 f81a 	bl	8003c84 <_init>
 8003c50:	2600      	movs	r6, #0
 8003c52:	4d0a      	ldr	r5, [pc, #40]	@ (8003c7c <__libc_init_array+0x40>)
 8003c54:	4c0a      	ldr	r4, [pc, #40]	@ (8003c80 <__libc_init_array+0x44>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08003cdc 	.word	0x08003cdc
 8003c78:	08003cdc 	.word	0x08003cdc
 8003c7c:	08003cdc 	.word	0x08003cdc
 8003c80:	08003ce0 	.word	0x08003ce0

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
