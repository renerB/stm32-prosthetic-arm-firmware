
prosthetic-arm-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb8  08004cb8  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  08004cb8  08004cb8  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cb8  08004cb8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cbc  08004cbc  00005cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004cc0  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000070  08004d30  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08004d30  0000671c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a98b  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb8  00000000  00000000  00010a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000128e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091a  00000000  00000000  000134a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dde  00000000  00000000  00013dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6f7  00000000  00000000  0002bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d07a  00000000  00000000  0003928f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  000c634c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c98c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c60 	.word	0x08004c60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c60 	.word	0x08004c60

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d32:	2afd      	cmp	r2, #253	@ 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	@ 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	@ 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	@ 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <generate_fingers_positions_binary>:
		break;
	}
}

void generate_fingers_positions_binary(uint32_t *finger_position, uint8_t mode)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	switch(mode){
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	3b01      	subs	r3, #1
 800107c:	2b08      	cmp	r3, #8
 800107e:	f200 80e2 	bhi.w	8001246 <generate_fingers_positions_binary+0x1da>
 8001082:	a201      	add	r2, pc, #4	@ (adr r2, 8001088 <generate_fingers_positions_binary+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010ad 	.word	0x080010ad
 800108c:	080010d5 	.word	0x080010d5
 8001090:	08001107 	.word	0x08001107
 8001094:	08001133 	.word	0x08001133
 8001098:	0800115d 	.word	0x0800115d
 800109c:	0800118b 	.word	0x0800118b
 80010a0:	080011bb 	.word	0x080011bb
 80010a4:	080011eb 	.word	0x080011eb
 80010a8:	08001219 	.word	0x08001219
	case 1:
		finger_position[0] = MIN_DUTY_CICLE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22fa      	movs	r2, #250	@ 0xfa
 80010b0:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3304      	adds	r3, #4
 80010b6:	22fa      	movs	r2, #250	@ 0xfa
 80010b8:	601a      	str	r2, [r3, #0]
		finger_position[2] = MIN_DUTY_CICLE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3308      	adds	r3, #8
 80010be:	22fa      	movs	r2, #250	@ 0xfa
 80010c0:	601a      	str	r2, [r3, #0]
		finger_position[3] = MIN_DUTY_CICLE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	330c      	adds	r3, #12
 80010c6:	22fa      	movs	r2, #250	@ 0xfa
 80010c8:	601a      	str	r2, [r3, #0]
		finger_position[4] = MIN_DUTY_CICLE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3310      	adds	r3, #16
 80010ce:	22fa      	movs	r2, #250	@ 0xfa
 80010d0:	601a      	str	r2, [r3, #0]
		break;
 80010d2:	e0b8      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 2:
		finger_position[0] = MAX_DUTY_CICLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010da:	601a      	str	r2, [r3, #0]
		finger_position[1] = MAX_DUTY_CICLE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3304      	adds	r3, #4
 80010e0:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010e4:	601a      	str	r2, [r3, #0]
		finger_position[2] = MAX_DUTY_CICLE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3308      	adds	r3, #8
 80010ea:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010ee:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330c      	adds	r3, #12
 80010f4:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010f8:	601a      	str	r2, [r3, #0]
		finger_position[4] = MAX_DUTY_CICLE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3310      	adds	r3, #16
 80010fe:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001102:	601a      	str	r2, [r3, #0]
		break;
 8001104:	e09f      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 3:
		finger_position[0] = MAX_DUTY_CICLE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800110c:	601a      	str	r2, [r3, #0]
		finger_position[1] = MAX_DUTY_CICLE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3304      	adds	r3, #4
 8001112:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001116:	601a      	str	r2, [r3, #0]
		finger_position[2] = MIN_DUTY_CICLE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3308      	adds	r3, #8
 800111c:	22fa      	movs	r2, #250	@ 0xfa
 800111e:	601a      	str	r2, [r3, #0]
		finger_position[3] = MIN_DUTY_CICLE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	330c      	adds	r3, #12
 8001124:	22fa      	movs	r2, #250	@ 0xfa
 8001126:	601a      	str	r2, [r3, #0]
		finger_position[4] = MIN_DUTY_CICLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3310      	adds	r3, #16
 800112c:	22fa      	movs	r2, #250	@ 0xfa
 800112e:	601a      	str	r2, [r3, #0]
		break;
 8001130:	e089      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 4:
		finger_position[0] = MAX_DUTY_CICLE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001138:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3304      	adds	r3, #4
 800113e:	22fa      	movs	r2, #250	@ 0xfa
 8001140:	601a      	str	r2, [r3, #0]
		finger_position[2] = MIN_DUTY_CICLE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3308      	adds	r3, #8
 8001146:	22fa      	movs	r2, #250	@ 0xfa
 8001148:	601a      	str	r2, [r3, #0]
		finger_position[3] = MIN_DUTY_CICLE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	330c      	adds	r3, #12
 800114e:	22fa      	movs	r2, #250	@ 0xfa
 8001150:	601a      	str	r2, [r3, #0]
		finger_position[4] = MIN_DUTY_CICLE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3310      	adds	r3, #16
 8001156:	22fa      	movs	r2, #250	@ 0xfa
 8001158:	601a      	str	r2, [r3, #0]
		break;
 800115a:	e074      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 5:
		finger_position[0] = MIN_DUTY_CICLE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	22fa      	movs	r2, #250	@ 0xfa
 8001160:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	22fa      	movs	r2, #250	@ 0xfa
 8001168:	601a      	str	r2, [r3, #0]
		finger_position[2] = MAX_DUTY_CICLE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3308      	adds	r3, #8
 800116e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001172:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	330c      	adds	r3, #12
 8001178:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800117c:	601a      	str	r2, [r3, #0]
		finger_position[4] = MAX_DUTY_CICLE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3310      	adds	r3, #16
 8001182:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001186:	601a      	str	r2, [r3, #0]
		break;
 8001188:	e05d      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 6:
		finger_position[0] = MIN_DUTY_CICLE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	22fa      	movs	r2, #250	@ 0xfa
 800118e:	601a      	str	r2, [r3, #0]
		finger_position[1] = MAX_DUTY_CICLE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3304      	adds	r3, #4
 8001194:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001198:	601a      	str	r2, [r3, #0]
		finger_position[2] = MAX_DUTY_CICLE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3308      	adds	r3, #8
 800119e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011a2:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	330c      	adds	r3, #12
 80011a8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011ac:	601a      	str	r2, [r3, #0]
		finger_position[4] = MAX_DUTY_CICLE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3310      	adds	r3, #16
 80011b2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011b6:	601a      	str	r2, [r3, #0]
		break;
 80011b8:	e045      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 7:
		finger_position[0] = MAX_DUTY_CICLE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011c0:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	22fa      	movs	r2, #250	@ 0xfa
 80011c8:	601a      	str	r2, [r3, #0]
		finger_position[2] = MAX_DUTY_CICLE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3308      	adds	r3, #8
 80011ce:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011d2:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	330c      	adds	r3, #12
 80011d8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011dc:	601a      	str	r2, [r3, #0]
		finger_position[4] = MAX_DUTY_CICLE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3310      	adds	r3, #16
 80011e2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011e6:	601a      	str	r2, [r3, #0]
		break;
 80011e8:	e02d      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 8:
		finger_position[0] = MAX_DUTY_CICLE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80011f0:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3304      	adds	r3, #4
 80011f6:	22fa      	movs	r2, #250	@ 0xfa
 80011f8:	601a      	str	r2, [r3, #0]
		finger_position[2] = MIN_DUTY_CICLE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3308      	adds	r3, #8
 80011fe:	22fa      	movs	r2, #250	@ 0xfa
 8001200:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	330c      	adds	r3, #12
 8001206:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800120a:	601a      	str	r2, [r3, #0]
		finger_position[4] = MAX_DUTY_CICLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3310      	adds	r3, #16
 8001210:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001214:	601a      	str	r2, [r3, #0]
		break;
 8001216:	e016      	b.n	8001246 <generate_fingers_positions_binary+0x1da>
	case 9:
		finger_position[0] = MAX_DUTY_CICLE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800121e:	601a      	str	r2, [r3, #0]
		finger_position[1] = MIN_DUTY_CICLE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3304      	adds	r3, #4
 8001224:	22fa      	movs	r2, #250	@ 0xfa
 8001226:	601a      	str	r2, [r3, #0]
		finger_position[2] = MAX_DUTY_CICLE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3308      	adds	r3, #8
 800122c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001230:	601a      	str	r2, [r3, #0]
		finger_position[3] = MAX_DUTY_CICLE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	330c      	adds	r3, #12
 8001236:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800123a:	601a      	str	r2, [r3, #0]
		finger_position[4] = MIN_DUTY_CICLE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3310      	adds	r3, #16
 8001240:	22fa      	movs	r2, #250	@ 0xfa
 8001242:	601a      	str	r2, [r3, #0]
		break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <rms>:

float rms(uint32_t signal[], int size)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	float integral = 0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
	float rms = 0;
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]

	int i;
	for(i=0; i<size; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e018      	b.n	800129e <rms+0x4e>
	{
		integral += (signal[i] * signal[i]);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	440a      	add	r2, r1
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcd3 	bl	8000c30 <__aeabi_ui2f>
 800128a:	4603      	mov	r3, r0
 800128c:	4619      	mov	r1, r3
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fc1e 	bl	8000ad0 <__addsf3>
 8001294:	4603      	mov	r3, r0
 8001296:	617b      	str	r3, [r7, #20]
	for(i=0; i<size; i++)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbe2      	blt.n	800126c <rms+0x1c>
	}

	integral = integral / size;
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fcc6 	bl	8000c38 <__aeabi_i2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f7ff fdc9 	bl	8000e48 <__aeabi_fdiv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	617b      	str	r3, [r7, #20]
	rms = sqrt(integral);
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff f8aa 	bl	8000414 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f003 fbd0 	bl	8004a6c <sqrt>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fba6 	bl	8000a24 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	60fb      	str	r3, [r7, #12]

	return rms;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f000 fd3c 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f8b6 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f000 fac8 	bl	8001888 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f8:	f000 faa8 	bl	800184c <MX_DMA_Init>
  MX_TIM2_Init();
 80012fc:	f000 f94a 	bl	8001594 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001300:	f000 f90a 	bl	8001518 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001304:	f000 f9d2 	bl	80016ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001308:	f000 fa52 	bl	80017b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start all 5 PWM signals generation
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	4846      	ldr	r0, [pc, #280]	@ (8001428 <main+0x140>)
 8001310:	f002 fd0e 	bl	8003d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001314:	2104      	movs	r1, #4
 8001316:	4844      	ldr	r0, [pc, #272]	@ (8001428 <main+0x140>)
 8001318:	f002 fd0a 	bl	8003d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800131c:	210c      	movs	r1, #12
 800131e:	4842      	ldr	r0, [pc, #264]	@ (8001428 <main+0x140>)
 8001320:	f002 fd06 	bl	8003d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	4841      	ldr	r0, [pc, #260]	@ (800142c <main+0x144>)
 8001328:	f002 fd02 	bl	8003d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800132c:	2104      	movs	r1, #4
 800132e:	483f      	ldr	r0, [pc, #252]	@ (800142c <main+0x144>)
 8001330:	f002 fcfe 	bl	8003d30 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001334:	483e      	ldr	r0, [pc, #248]	@ (8001430 <main+0x148>)
 8001336:	f001 f93b 	bl	80025b0 <HAL_ADCEx_Calibration_Start>
  // Start TIM4 interruption for sampling rate control
  HAL_TIM_Base_Start_IT(&htim4);
 800133a:	483e      	ldr	r0, [pc, #248]	@ (8001434 <main+0x14c>)
 800133c:	f002 fc4e 	bl	8003bdc <HAL_TIM_Base_Start_IT>

  generate_fingers_positions_binary(finger_position, mode);
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <main+0x150>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	483d      	ldr	r0, [pc, #244]	@ (800143c <main+0x154>)
 8001348:	f7ff fe90 	bl	800106c <generate_fingers_positions_binary>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(button_pressed > 0){
 800134c:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <main+0x158>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d016      	beq.n	8001382 <main+0x9a>
		  button_pressed = 0;
 8001354:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <main+0x158>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

		  if(mode == POSTURES){
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <main+0x150>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d103      	bne.n	800136a <main+0x82>
			  mode = 1;
 8001362:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <main+0x150>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e005      	b.n	8001376 <main+0x8e>
		  } else{
			  mode++;
 800136a:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <main+0x150>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b31      	ldr	r3, [pc, #196]	@ (8001438 <main+0x150>)
 8001374:	701a      	strb	r2, [r3, #0]
		  }
//		  generate_fingers_positions(finger_position, mode);
		  generate_fingers_positions_binary(finger_position, mode);
 8001376:	4b30      	ldr	r3, [pc, #192]	@ (8001438 <main+0x150>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	482f      	ldr	r0, [pc, #188]	@ (800143c <main+0x154>)
 800137e:	f7ff fe75 	bl	800106c <generate_fingers_positions_binary>
	  }

	  if(start_conversion > 0){
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <main+0x15c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <main+0xbc>
		  start_conversion = 0;
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <main+0x15c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_DMA(&hadc1, adc_result+rms_index, 1);
 8001390:	4b2d      	ldr	r3, [pc, #180]	@ (8001448 <main+0x160>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4a2d      	ldr	r2, [pc, #180]	@ (800144c <main+0x164>)
 8001398:	4413      	add	r3, r2
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	4824      	ldr	r0, [pc, #144]	@ (8001430 <main+0x148>)
 80013a0:	f000 fe1c 	bl	8001fdc <HAL_ADC_Start_DMA>
	  }

	  if(finished_conversion > 0){
 80013a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <main+0x168>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <main+0xd8>
		  finished_conversion = 0;
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <main+0x168>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]

		  rms_value = rms(adc_result, RMS_WINDOW_SIZE);
 80013b2:	21fa      	movs	r1, #250	@ 0xfa
 80013b4:	4825      	ldr	r0, [pc, #148]	@ (800144c <main+0x164>)
 80013b6:	f7ff ff4b 	bl	8001250 <rms>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a25      	ldr	r2, [pc, #148]	@ (8001454 <main+0x16c>)
 80013be:	6013      	str	r3, [r2, #0]
//	  TIM3->CCR1=duty_cycle*finger_position[3] + MIN_DUTY_CICLE;
//	  TIM3->CCR2=duty_cycle*finger_position[4] + MIN_DUTY_CICLE;

	  // The following lines are for a discreet behavior

	  if(rms_value > VMIN){
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <main+0x16c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4924      	ldr	r1, [pc, #144]	@ (8001458 <main+0x170>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe46 	bl	8001058 <__aeabi_fcmpgt>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d017      	beq.n	8001402 <main+0x11a>
		  TIM2->CCR1=finger_position[0];
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <main+0x154>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM2->CCR2=finger_position[1];
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <main+0x154>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM2->CCR4=finger_position[2];
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <main+0x154>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
		  TIM3->CCR1=finger_position[3];
 80013f0:	4a1a      	ldr	r2, [pc, #104]	@ (800145c <main+0x174>)
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <main+0x154>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM3->CCR2=finger_position[4];
 80013f8:	4a18      	ldr	r2, [pc, #96]	@ (800145c <main+0x174>)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <main+0x154>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8001400:	e7a4      	b.n	800134c <main+0x64>
	  }
	  else {
		  TIM2->CCR1=MIN_DUTY_CICLE;
 8001402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001406:	22fa      	movs	r2, #250	@ 0xfa
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM2->CCR2=MIN_DUTY_CICLE;
 800140a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140e:	22fa      	movs	r2, #250	@ 0xfa
 8001410:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM2->CCR4=MIN_DUTY_CICLE;
 8001412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001416:	22fa      	movs	r2, #250	@ 0xfa
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
		  TIM3->CCR1=MIN_DUTY_CICLE;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <main+0x174>)
 800141c:	22fa      	movs	r2, #250	@ 0xfa
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR2=MIN_DUTY_CICLE;
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <main+0x174>)
 8001422:	22fa      	movs	r2, #250	@ 0xfa
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
	  if(button_pressed > 0){
 8001426:	e791      	b.n	800134c <main+0x64>
 8001428:	20000100 	.word	0x20000100
 800142c:	20000148 	.word	0x20000148
 8001430:	2000008c 	.word	0x2000008c
 8001434:	20000190 	.word	0x20000190
 8001438:	20000000 	.word	0x20000000
 800143c:	200005c8 	.word	0x200005c8
 8001440:	200005dc 	.word	0x200005dc
 8001444:	200005dd 	.word	0x200005dd
 8001448:	200005c4 	.word	0x200005c4
 800144c:	200001d8 	.word	0x200001d8
 8001450:	200005de 	.word	0x200005de
 8001454:	200005c0 	.word	0x200005c0
 8001458:	43fa0000 	.word	0x43fa0000
 800145c:	40000400 	.word	0x40000400

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146a:	2228      	movs	r2, #40	@ 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 faca 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001490:	2301      	movs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149e:	2301      	movs	r3, #1
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fdd8 	bl	800306c <HAL_RCC_OscConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014c2:	f000 faa1 	bl	8001a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	230f      	movs	r3, #15
 80014c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2102      	movs	r1, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 f844 	bl	8003570 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ee:	f000 fa8b 	bl	8001a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014f2:	2302      	movs	r3, #2
 80014f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80014f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f9b0 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800150a:	f000 fa7d 	bl	8001a08 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_ADC1_Init+0x74>)
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <MX_ADC1_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_ADC1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_ADC1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_ADC1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_ADC1_Init+0x74>)
 8001542:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_ADC1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_ADC1_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	480d      	ldr	r0, [pc, #52]	@ (800158c <MX_ADC1_Init+0x74>)
 8001556:	f000 fc69 	bl	8001e2c <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 fa52 	bl	8001a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001564:	2309      	movs	r3, #9
 8001566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800156c:	2301      	movs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_ADC1_Init+0x74>)
 8001576:	f000 fe21 	bl	80021bc <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001580:	f000 fa42 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000008c 	.word	0x2000008c
 8001590:	40012400 	.word	0x40012400

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	@ 0x38
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c4:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 80015cc:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015ce:	228f      	movs	r2, #143	@ 0x8f
 80015d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80015d8:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b31      	ldr	r3, [pc, #196]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ec:	482e      	ldr	r0, [pc, #184]	@ (80016a8 <MX_TIM2_Init+0x114>)
 80015ee:	f002 faa5 	bl	8003b3c <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015f8:	f000 fa06 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001606:	4619      	mov	r1, r3
 8001608:	4827      	ldr	r0, [pc, #156]	@ (80016a8 <MX_TIM2_Init+0x114>)
 800160a:	f002 fdfd 	bl	8004208 <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001614:	f000 f9f8 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001618:	4823      	ldr	r0, [pc, #140]	@ (80016a8 <MX_TIM2_Init+0x114>)
 800161a:	f002 fb31 	bl	8003c80 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001624:	f000 f9f0 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <MX_TIM2_Init+0x114>)
 8001638:	f003 f976 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001642:	f000 f9e1 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001646:	2360      	movs	r3, #96	@ 0x60
 8001648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	@ (80016a8 <MX_TIM2_Init+0x114>)
 800165e:	f002 fd11 	bl	8004084 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001668:	f000 f9ce 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2204      	movs	r2, #4
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_TIM2_Init+0x114>)
 8001674:	f002 fd06 	bl	8004084 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800167e:	f000 f9c3 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	220c      	movs	r2, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM2_Init+0x114>)
 800168a:	f002 fcfb 	bl	8004084 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001694:	f000 f9b8 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM2_Init+0x114>)
 800169a:	f000 faa1 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	@ 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000100 	.word	0x20000100

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	@ 0x38
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016de:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <MX_TIM3_Init+0x100>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 80016e2:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016e4:	228f      	movs	r2, #143	@ 0x8f
 80016e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001702:	4829      	ldr	r0, [pc, #164]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 8001704:	f002 fa1a 	bl	8003b3c <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800170e:	f000 f97b 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001716:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171c:	4619      	mov	r1, r3
 800171e:	4822      	ldr	r0, [pc, #136]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 8001720:	f002 fd72 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800172a:	f000 f96d 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800172e:	481e      	ldr	r0, [pc, #120]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 8001730:	f002 faa6 	bl	8003c80 <HAL_TIM_PWM_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800173a:	f000 f965 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4619      	mov	r1, r3
 800174c:	4816      	ldr	r0, [pc, #88]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 800174e:	f003 f8eb 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001758:	f000 f956 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175c:	2360      	movs	r3, #96	@ 0x60
 800175e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 8001774:	f002 fc86 	bl	8004084 <HAL_TIM_PWM_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800177e:	f000 f943 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2204      	movs	r2, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 800178a:	f002 fc7b 	bl	8004084 <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001794:	f000 f938 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <MX_TIM3_Init+0xfc>)
 800179a:	f000 fa21 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	@ 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000148 	.word	0x20000148
 80017ac:	40000400 	.word	0x40000400

080017b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <MX_TIM4_Init+0x98>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017d4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80017d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017e2:	2209      	movs	r2, #9
 80017e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017f2:	4814      	ldr	r0, [pc, #80]	@ (8001844 <MX_TIM4_Init+0x94>)
 80017f4:	f002 f9a2 	bl	8003b3c <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f903 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_TIM4_Init+0x94>)
 8001810:	f002 fcfa 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f8f5 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_TIM4_Init+0x94>)
 800182c:	f003 f87c 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001836:	f000 f8e7 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000190 	.word	0x20000190
 8001848:	40000800 	.word	0x40000800

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_DMA_Init+0x38>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <MX_DMA_Init+0x38>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_DMA_Init+0x38>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200b      	movs	r0, #11
 8001870:	f001 f823 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001874:	200b      	movs	r0, #11
 8001876:	f001 f83c 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189c:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <MX_GPIO_Init+0xd0>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018ba:	f043 0320 	orr.w	r3, r3, #32
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_GPIO_Init+0xd0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <MX_GPIO_Init+0xd4>)
 8001904:	f001 fb82 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	480e      	ldr	r0, [pc, #56]	@ (800195c <MX_GPIO_Init+0xd4>)
 8001922:	f001 f9ef 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 8001926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800192a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_GPIO_Init+0xd8>)
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	480a      	ldr	r0, [pc, #40]	@ (8001964 <MX_GPIO_Init+0xdc>)
 800193c:	f001 f9e2 	bl	8002d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2028      	movs	r0, #40	@ 0x28
 8001946:	f000 ffb8 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800194a:	2028      	movs	r0, #40	@ 0x28
 800194c:	f000 ffd1 	bl	80028f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	40011000 	.word	0x40011000
 8001960:	10210000 	.word	0x10210000
 8001964:	40010c00 	.word	0x40010c00

08001968 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if(rms_index >= RMS_WINDOW_SIZE){
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2bf9      	cmp	r3, #249	@ 0xf9
 8001976:	d909      	bls.n	800198c <HAL_ADC_ConvCpltCallback+0x24>
		rms_index = 0;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		finished_conversion++;
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x40>)
 8001988:	701a      	strb	r2, [r3, #0]
	} else{
		rms_index++;
	}
}
 800198a:	e005      	b.n	8001998 <HAL_ADC_ConvCpltCallback+0x30>
		rms_index++;
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001996:	701a      	strb	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200005c4 	.word	0x200005c4
 80019a8:	200005de 	.word	0x200005de

080019ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_PIN_Pin){
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019bc:	d105      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x1e>
		button_pressed++;
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80019c8:	701a      	strb	r2, [r3, #0]
	}
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	200005dc 	.word	0x200005dc

080019d8 <HAL_TIM_PeriodElapsedCallback>:

// Timer configured to generate IT at 1kHz frequency
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d105      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		start_conversion++;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019f2:	701a      	strb	r2, [r3, #0]
	}
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000190 	.word	0x20000190
 8001a04:	200005dd 	.word	0x200005dd

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <Error_Handler+0x8>

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_MspInit+0x5c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_MspInit+0x60>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_MspInit+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000

08001a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <HAL_ADC_MspInit+0xbc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d149      	bne.n	8001b2c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a26      	ldr	r2, [pc, #152]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b24      	ldr	r3, [pc, #144]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_ADC_MspInit+0xc0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001ad8:	f001 f914 	bl	8002d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001ade:	4a19      	ldr	r2, [pc, #100]	@ (8001b44 <HAL_ADC_MspInit+0xcc>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001afa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b10:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b12:	f000 ff09 	bl	8002928 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b1c:	f7ff ff74 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b24:	621a      	str	r2, [r3, #32]
 8001b26:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012400 	.word	0x40012400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	200000bc 	.word	0x200000bc
 8001b44:	40020008 	.word	0x40020008

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b58:	d10c      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b72:	e02a      	b.n	8001bca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10c      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
}
 8001b96:	e018      	b.n	8001bca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bdc <HAL_TIM_Base_MspInit+0x94>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d113      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	201e      	movs	r0, #30
 8001bc0:	f000 fe7b 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bc4:	201e      	movs	r0, #30
 8001bc6:	f000 fe94 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40000800 	.word	0x40000800

08001be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfe:	d118      	bne.n	8001c32 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001c18:	230b      	movs	r3, #11
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4813      	ldr	r0, [pc, #76]	@ (8001c78 <HAL_TIM_MspPostInit+0x98>)
 8001c2c:	f001 f86a 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c30:	e01c      	b.n	8001c6c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d117      	bne.n	8001c6c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_TIM_MspPostInit+0x94>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c54:	23c0      	movs	r3, #192	@ 0xc0
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <HAL_TIM_MspPostInit+0x98>)
 8001c68:	f001 f84c 	bl	8002d04 <HAL_GPIO_Init>
}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	40000400 	.word	0x40000400

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 f890 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <DMA1_Channel1_IRQHandler+0x10>)
 8001cde:	f000 fedd 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200000bc 	.word	0x200000bc

08001cec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <TIM4_IRQHandler+0x10>)
 8001cf2:	f002 f8bf 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000190 	.word	0x20000190

08001d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PIN_Pin);
 8001d04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d08:	f001 f998 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff fff8 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d22:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d38:	4c09      	ldr	r4, [pc, #36]	@ (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 fe6d 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff facd 	bl	80012e8 <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d58:	08004cc0 	.word	0x08004cc0
  ldr r2, =_sbss
 8001d5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d60:	2000071c 	.word	0x2000071c

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_Init+0x28>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <HAL_Init+0x28>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fd93 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fe46 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fdab 	bl	800290e <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 fd73 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000004 	.word	0x20000004
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_IncTick+0x1c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_IncTick+0x20>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a03      	ldr	r2, [pc, #12]	@ (8001e14 <HAL_IncTick+0x20>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	200005e0 	.word	0x200005e0

08001e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_GetTick+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	200005e0 	.word	0x200005e0

08001e2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0be      	b.n	8001fcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe04 	bl	8001a78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 faf5 	bl	8002460 <ADC_ConversionStop_Disable>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8099 	bne.w	8001fba <HAL_ADC_Init+0x18e>
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8095 	bne.w	8001fba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e98:	f023 0302 	bic.w	r3, r3, #2
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7b1b      	ldrb	r3, [r3, #12]
 8001eb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec4:	d003      	beq.n	8001ece <HAL_ADC_Init+0xa2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_ADC_Init+0xa8>
 8001ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_Init+0xaa>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7d1b      	ldrb	r3, [r3, #20]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d119      	bne.n	8001f18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7b1b      	ldrb	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	035a      	lsls	r2, r3, #13
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e00b      	b.n	8001f18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_ADC_Init+0x1a8>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f48:	d003      	beq.n	8001f52 <HAL_ADC_Init+0x126>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d104      	bne.n	8001f5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	051b      	lsls	r3, r3, #20
 8001f5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_ADC_Init+0x1ac>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10b      	bne.n	8001f98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f96:	e018      	b.n	8001fca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f023 0312 	bic.w	r3, r3, #18
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb8:	e007      	b.n	8001fca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fd8:	ff1f0efe 	.word	0xff1f0efe

08001fdc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a64      	ldr	r2, [pc, #400]	@ (8002184 <HAL_ADC_Start_DMA+0x1a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_Start_DMA+0x24>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a63      	ldr	r2, [pc, #396]	@ (8002188 <HAL_ADC_Start_DMA+0x1ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d106      	bne.n	800200e <HAL_ADC_Start_DMA+0x32>
 8002000:	4b60      	ldr	r3, [pc, #384]	@ (8002184 <HAL_ADC_Start_DMA+0x1a8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 80b3 	bne.w	8002174 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADC_Start_DMA+0x40>
 8002018:	2302      	movs	r3, #2
 800201a:	e0ae      	b.n	800217a <HAL_ADC_Start_DMA+0x19e>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f9c1 	bl	80023ac <ADC_Enable>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 809a 	bne.w	800216a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a4e      	ldr	r2, [pc, #312]	@ (8002188 <HAL_ADC_Start_DMA+0x1ac>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d105      	bne.n	8002060 <HAL_ADC_Start_DMA+0x84>
 8002054:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <HAL_ADC_Start_DMA+0x1a8>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d115      	bne.n	800208c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002076:	2b00      	cmp	r3, #0
 8002078:	d026      	beq.n	80020c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002082:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208a:	e01d      	b.n	80020c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a39      	ldr	r2, [pc, #228]	@ (8002184 <HAL_ADC_Start_DMA+0x1a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_ADC_Start_DMA+0xd0>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <HAL_ADC_Start_DMA+0x1ac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10d      	bne.n	80020c8 <HAL_ADC_Start_DMA+0xec>
 80020ac:	4b35      	ldr	r3, [pc, #212]	@ (8002184 <HAL_ADC_Start_DMA+0x1a8>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f023 0206 	bic.w	r2, r3, #6
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a25      	ldr	r2, [pc, #148]	@ (800218c <HAL_ADC_Start_DMA+0x1b0>)
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <HAL_ADC_Start_DMA+0x1b4>)
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <HAL_ADC_Start_DMA+0x1b8>)
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0202 	mvn.w	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002120:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a18      	ldr	r0, [r3, #32]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	334c      	adds	r3, #76	@ 0x4c
 800212c:	4619      	mov	r1, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f000 fc53 	bl	80029dc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002140:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002144:	d108      	bne.n	8002158 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002154:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002156:	e00f      	b.n	8002178 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002166:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002168:	e006      	b.n	8002178 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002172:	e001      	b.n	8002178 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002178:	7dfb      	ldrb	r3, [r7, #23]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40012400 	.word	0x40012400
 8002188:	40012800 	.word	0x40012800
 800218c:	080024e3 	.word	0x080024e3
 8002190:	0800255f 	.word	0x0800255f
 8002194:	0800257b 	.word	0x0800257b

08002198 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x20>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0dc      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1da>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d81c      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b05      	subs	r3, #5
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	4019      	ands	r1, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b05      	subs	r3, #5
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34
 8002224:	e03c      	b.n	80022a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d81c      	bhi.n	8002268 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b23      	subs	r3, #35	@ 0x23
 8002240:	221f      	movs	r2, #31
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	4019      	ands	r1, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b23      	subs	r3, #35	@ 0x23
 800225a:	fa00 f203 	lsl.w	r2, r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
 8002266:	e01b      	b.n	80022a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b41      	subs	r3, #65	@ 0x41
 800227a:	221f      	movs	r2, #31
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b41      	subs	r3, #65	@ 0x41
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d91c      	bls.n	80022e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	3b1e      	subs	r3, #30
 80022ba:	2207      	movs	r2, #7
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4019      	ands	r1, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6898      	ldr	r0, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	e019      	b.n	8002316 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6919      	ldr	r1, [r3, #16]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	2207      	movs	r2, #7
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6898      	ldr	r0, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d003      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002322:	2b11      	cmp	r3, #17
 8002324:	d132      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1d      	ldr	r2, [pc, #116]	@ (80023a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d125      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d126      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800234c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b10      	cmp	r3, #16
 8002354:	d11a      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9a      	lsrs	r2, r3, #18
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800236c:	e002      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3b01      	subs	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f9      	bne.n	800236e <HAL_ADC_ConfigChannel+0x1b2>
 800237a:	e007      	b.n	800238c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40012400 	.word	0x40012400
 80023a4:	20000004 	.word	0x20000004
 80023a8:	431bde83 	.word	0x431bde83

080023ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d040      	beq.n	800244c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023da:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <ADC_Enable+0xac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1f      	ldr	r2, [pc, #124]	@ (800245c <ADC_Enable+0xb0>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	0c9b      	lsrs	r3, r3, #18
 80023e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e8:	e002      	b.n	80023f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f9      	bne.n	80023ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023f6:	f7ff fd0f 	bl	8001e18 <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023fc:	e01f      	b.n	800243e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fe:	f7ff fd0b 	bl	8001e18 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d918      	bls.n	800243e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d011      	beq.n	800243e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e007      	b.n	800244e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d1d8      	bne.n	80023fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000004 	.word	0x20000004
 800245c:	431bde83 	.word	0x431bde83

08002460 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d12e      	bne.n	80024d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800248a:	f7ff fcc5 	bl	8001e18 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002490:	e01b      	b.n	80024ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002492:	f7ff fcc1 	bl	8001e18 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d914      	bls.n	80024ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10d      	bne.n	80024ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d0dc      	beq.n	8002492 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d127      	bne.n	800254c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002512:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002516:	d115      	bne.n	8002544 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff fa0f 	bl	8001968 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800254a:	e004      	b.n	8002556 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fe13 	bl	8002198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fe02 	bl	80021aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADCEx_Calibration_Start+0x1e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e097      	b.n	80026fe <HAL_ADCEx_Calibration_Start+0x14e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff42 	bl	8002460 <ADC_ConversionStop_Disable>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fee3 	bl	80023ac <ADC_Enable>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 8081 	bne.w	80026f4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025fa:	f023 0302 	bic.w	r3, r3, #2
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_ADCEx_Calibration_Start+0x158>)
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	2002      	movs	r0, #2
 800260c:	f001 f9e0 	bl	80039d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002610:	4603      	mov	r3, r0
 8002612:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002616:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002618:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800261a:	e002      	b.n	8002622 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002638:	f7ff fbee 	bl	8001e18 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800263e:	e01b      	b.n	8002678 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002640:	f7ff fbea 	bl	8001e18 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b0a      	cmp	r3, #10
 800264c:	d914      	bls.n	8002678 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	f023 0312 	bic.w	r3, r3, #18
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e042      	b.n	80026fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1dc      	bne.n	8002640 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0204 	orr.w	r2, r2, #4
 8002694:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002696:	f7ff fbbf 	bl	8001e18 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800269c:	e01b      	b.n	80026d6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800269e:	f7ff fbbb 	bl	8001e18 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d914      	bls.n	80026d6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	f023 0312 	bic.w	r3, r3, #18
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e013      	b.n	80026fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1dc      	bne.n	800269e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	f023 0303 	bic.w	r3, r3, #3
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000004 	.word	0x20000004

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4906      	ldr	r1, [pc, #24]	@ (80027a4 <__NVIC_EnableIRQ+0x34>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	@ (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	@ (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff90 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff2d 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff42 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff90 	bl	80027fc <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5f 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff35 	bl	8002770 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e043      	b.n	80029c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_DMA_Init+0xa8>)
 8002946:	4413      	add	r3, r2
 8002948:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <HAL_DMA_Init+0xac>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	009a      	lsls	r2, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_DMA_Init+0xb0>)
 800295a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002972:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	bffdfff8 	.word	0xbffdfff8
 80029d4:	cccccccd 	.word	0xcccccccd
 80029d8:	40020000 	.word	0x40020000

080029dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Start_IT+0x20>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e04b      	b.n	8002a94 <HAL_DMA_Start_IT+0xb8>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d13a      	bne.n	8002a86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f937 	bl	8002ca8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 020e 	orr.w	r2, r2, #14
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e00f      	b.n	8002a74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 020a 	orr.w	r2, r2, #10
 8002a72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e005      	b.n	8002a92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	2204      	movs	r2, #4
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d04f      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xc8>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0204 	bic.w	r2, r2, #4
 8002aea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a66      	ldr	r2, [pc, #408]	@ (8002c8c <HAL_DMA_IRQHandler+0x1f0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d029      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xae>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a65      	ldr	r2, [pc, #404]	@ (8002c90 <HAL_DMA_IRQHandler+0x1f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xaa>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a63      	ldr	r2, [pc, #396]	@ (8002c94 <HAL_DMA_IRQHandler+0x1f8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xa4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a62      	ldr	r2, [pc, #392]	@ (8002c98 <HAL_DMA_IRQHandler+0x1fc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d012      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x9e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a60      	ldr	r2, [pc, #384]	@ (8002c9c <HAL_DMA_IRQHandler+0x200>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00a      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x98>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca0 <HAL_DMA_IRQHandler+0x204>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x92>
 8002b28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b2c:	e00e      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b32:	e00b      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b38:	e008      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b3e:	e005      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b44:	e002      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b46:	2340      	movs	r3, #64	@ 0x40
 8002b48:	e000      	b.n	8002b4c <HAL_DMA_IRQHandler+0xb0>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	4a55      	ldr	r2, [pc, #340]	@ (8002ca4 <HAL_DMA_IRQHandler+0x208>)
 8002b4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8094 	beq.w	8002c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b62:	e08e      	b.n	8002c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	2202      	movs	r2, #2
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d056      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x186>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d051      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020a 	bic.w	r2, r2, #10
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a38      	ldr	r2, [pc, #224]	@ (8002c8c <HAL_DMA_IRQHandler+0x1f0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d029      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x166>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a37      	ldr	r2, [pc, #220]	@ (8002c90 <HAL_DMA_IRQHandler+0x1f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x162>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a35      	ldr	r2, [pc, #212]	@ (8002c94 <HAL_DMA_IRQHandler+0x1f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x15c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a34      	ldr	r2, [pc, #208]	@ (8002c98 <HAL_DMA_IRQHandler+0x1fc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d012      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x156>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a32      	ldr	r2, [pc, #200]	@ (8002c9c <HAL_DMA_IRQHandler+0x200>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x150>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a31      	ldr	r2, [pc, #196]	@ (8002ca0 <HAL_DMA_IRQHandler+0x204>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x14a>
 8002be0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002be4:	e00e      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002be6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bea:	e00b      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf0:	e008      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bf6:	e005      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002bf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfc:	e002      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e000      	b.n	8002c04 <HAL_DMA_IRQHandler+0x168>
 8002c02:	2302      	movs	r3, #2
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <HAL_DMA_IRQHandler+0x208>)
 8002c06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d034      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c20:	e02f      	b.n	8002c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	2208      	movs	r2, #8
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d028      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x1e8>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d023      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020e 	bic.w	r2, r2, #14
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
    }
  }
  return;
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
}
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40020008 	.word	0x40020008
 8002c90:	4002001c 	.word	0x4002001c
 8002c94:	40020030 	.word	0x40020030
 8002c98:	40020044 	.word	0x40020044
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	4002006c 	.word	0x4002006c
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d108      	bne.n	8002ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ce6:	e007      	b.n	8002cf8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b08b      	sub	sp, #44	@ 0x2c
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e169      	b.n	8002fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8158 	bne.w	8002fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a9a      	ldr	r2, [pc, #616]	@ (8002fa4 <HAL_GPIO_Init+0x2a0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d05e      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d40:	4a98      	ldr	r2, [pc, #608]	@ (8002fa4 <HAL_GPIO_Init+0x2a0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d875      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d46:	4a98      	ldr	r2, [pc, #608]	@ (8002fa8 <HAL_GPIO_Init+0x2a4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d058      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d4c:	4a96      	ldr	r2, [pc, #600]	@ (8002fa8 <HAL_GPIO_Init+0x2a4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d86f      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d52:	4a96      	ldr	r2, [pc, #600]	@ (8002fac <HAL_GPIO_Init+0x2a8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d052      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d58:	4a94      	ldr	r2, [pc, #592]	@ (8002fac <HAL_GPIO_Init+0x2a8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d869      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d5e:	4a94      	ldr	r2, [pc, #592]	@ (8002fb0 <HAL_GPIO_Init+0x2ac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04c      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d64:	4a92      	ldr	r2, [pc, #584]	@ (8002fb0 <HAL_GPIO_Init+0x2ac>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d863      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d6a:	4a92      	ldr	r2, [pc, #584]	@ (8002fb4 <HAL_GPIO_Init+0x2b0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d046      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
 8002d70:	4a90      	ldr	r2, [pc, #576]	@ (8002fb4 <HAL_GPIO_Init+0x2b0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d85d      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d82a      	bhi.n	8002dd0 <HAL_GPIO_Init+0xcc>
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d859      	bhi.n	8002e32 <HAL_GPIO_Init+0x12e>
 8002d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <HAL_GPIO_Init+0x80>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dff 	.word	0x08002dff
 8002d88:	08002dd9 	.word	0x08002dd9
 8002d8c:	08002deb 	.word	0x08002deb
 8002d90:	08002e2d 	.word	0x08002e2d
 8002d94:	08002e33 	.word	0x08002e33
 8002d98:	08002e33 	.word	0x08002e33
 8002d9c:	08002e33 	.word	0x08002e33
 8002da0:	08002e33 	.word	0x08002e33
 8002da4:	08002e33 	.word	0x08002e33
 8002da8:	08002e33 	.word	0x08002e33
 8002dac:	08002e33 	.word	0x08002e33
 8002db0:	08002e33 	.word	0x08002e33
 8002db4:	08002e33 	.word	0x08002e33
 8002db8:	08002e33 	.word	0x08002e33
 8002dbc:	08002e33 	.word	0x08002e33
 8002dc0:	08002e33 	.word	0x08002e33
 8002dc4:	08002e33 	.word	0x08002e33
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	4a79      	ldr	r2, [pc, #484]	@ (8002fb8 <HAL_GPIO_Init+0x2b4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd6:	e02c      	b.n	8002e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	623b      	str	r3, [r7, #32]
          break;
 8002dde:	e029      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	3304      	adds	r3, #4
 8002de6:	623b      	str	r3, [r7, #32]
          break;
 8002de8:	e024      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	3308      	adds	r3, #8
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e01f      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	623b      	str	r3, [r7, #32]
          break;
 8002dfc:	e01a      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e06:	2304      	movs	r3, #4
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e013      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e14:	2308      	movs	r3, #8
 8002e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	611a      	str	r2, [r3, #16]
          break;
 8002e1e:	e009      	b.n	8002e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e20:	2308      	movs	r3, #8
 8002e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	615a      	str	r2, [r3, #20]
          break;
 8002e2a:	e003      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x130>
          break;
 8002e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2bff      	cmp	r3, #255	@ 0xff
 8002e38:	d801      	bhi.n	8002e3e <HAL_GPIO_Init+0x13a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e001      	b.n	8002e42 <HAL_GPIO_Init+0x13e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2bff      	cmp	r3, #255	@ 0xff
 8002e48:	d802      	bhi.n	8002e50 <HAL_GPIO_Init+0x14c>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x152>
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	3b08      	subs	r3, #8
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80b1 	beq.w	8002fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e84:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <HAL_GPIO_Init+0x2b8>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_GPIO_Init+0x2b8>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <HAL_GPIO_Init+0x2b8>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e9c:	4a48      	ldr	r2, [pc, #288]	@ (8002fc0 <HAL_GPIO_Init+0x2bc>)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a40      	ldr	r2, [pc, #256]	@ (8002fc4 <HAL_GPIO_Init+0x2c0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_GPIO_Init+0x1ec>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc8 <HAL_GPIO_Init+0x2c4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00d      	beq.n	8002eec <HAL_GPIO_Init+0x1e8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fcc <HAL_GPIO_Init+0x2c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd0 <HAL_GPIO_Init+0x2cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_GPIO_Init+0x1e0>
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e006      	b.n	8002ef2 <HAL_GPIO_Init+0x1ee>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	e004      	b.n	8002ef2 <HAL_GPIO_Init+0x1ee>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e002      	b.n	8002ef2 <HAL_GPIO_Init+0x1ee>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_GPIO_Init+0x1ee>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	f002 0203 	and.w	r2, r2, #3
 8002ef8:	0092      	lsls	r2, r2, #2
 8002efa:	4093      	lsls	r3, r2
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f02:	492f      	ldr	r1, [pc, #188]	@ (8002fc0 <HAL_GPIO_Init+0x2bc>)
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	492c      	ldr	r1, [pc, #176]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4928      	ldr	r1, [pc, #160]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f44:	4b23      	ldr	r3, [pc, #140]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4922      	ldr	r1, [pc, #136]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	491e      	ldr	r1, [pc, #120]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4918      	ldr	r1, [pc, #96]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	4914      	ldr	r1, [pc, #80]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d021      	beq.n	8002fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	490e      	ldr	r1, [pc, #56]	@ (8002fd4 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
 8002fa0:	e021      	b.n	8002fe6 <HAL_GPIO_Init+0x2e2>
 8002fa2:	bf00      	nop
 8002fa4:	10320000 	.word	0x10320000
 8002fa8:	10310000 	.word	0x10310000
 8002fac:	10220000 	.word	0x10220000
 8002fb0:	10210000 	.word	0x10210000
 8002fb4:	10120000 	.word	0x10120000
 8002fb8:	10110000 	.word	0x10110000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40010800 	.word	0x40010800
 8002fc8:	40010c00 	.word	0x40010c00
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	40011400 	.word	0x40011400
 8002fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4909      	ldr	r1, [pc, #36]	@ (8003008 <HAL_GPIO_Init+0x304>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	3301      	adds	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f47f ae8e 	bne.w	8002d18 <HAL_GPIO_Init+0x14>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	372c      	adds	r7, #44	@ 0x2c
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fca6 	bl	80019ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e272      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8087 	beq.w	800319a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800308c:	4b92      	ldr	r3, [pc, #584]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b04      	cmp	r3, #4
 8003096:	d00c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003098:	4b8f      	ldr	r3, [pc, #572]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d112      	bne.n	80030ca <HAL_RCC_OscConfig+0x5e>
 80030a4:	4b8c      	ldr	r3, [pc, #560]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b0:	d10b      	bne.n	80030ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b2:	4b89      	ldr	r3, [pc, #548]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06c      	beq.n	8003198 <HAL_RCC_OscConfig+0x12c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d168      	bne.n	8003198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e24c      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x76>
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a7f      	ldr	r2, [pc, #508]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e02e      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b7b      	ldr	r3, [pc, #492]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7a      	ldr	r2, [pc, #488]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b78      	ldr	r3, [pc, #480]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a77      	ldr	r2, [pc, #476]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e01d      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0xbc>
 800310e:	4b72      	ldr	r3, [pc, #456]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a71      	ldr	r2, [pc, #452]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6e      	ldr	r2, [pc, #440]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 8003128:	4b6b      	ldr	r3, [pc, #428]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6a      	ldr	r2, [pc, #424]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800312e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b68      	ldr	r3, [pc, #416]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a67      	ldr	r2, [pc, #412]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800313e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fe66 	bl	8001e18 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fe62 	bl	8001e18 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e200      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b5d      	ldr	r3, [pc, #372]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0xe4>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fe52 	bl	8001e18 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fe fe4e 	bl	8001e18 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	@ 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1ec      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	4b53      	ldr	r3, [pc, #332]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x10c>
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a6:	4b4c      	ldr	r3, [pc, #304]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031b2:	4b49      	ldr	r3, [pc, #292]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x18c>
 80031be:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	4b43      	ldr	r3, [pc, #268]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x176>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1c0      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e2:	4b3d      	ldr	r3, [pc, #244]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4939      	ldr	r1, [pc, #228]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e03a      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003200:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe fe07 	bl	8001e18 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800320e:	f7fe fe03 	bl	8001e18 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e1a1      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4927      	ldr	r1, [pc, #156]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe fde6 	bl	8001e18 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe fde2 	bl	8001e18 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e180      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1d      	ldr	r3, [pc, #116]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03a      	beq.n	80032f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <HAL_RCC_OscConfig+0x274>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fe fdc6 	bl	8001e18 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003290:	f7fe fdc2 	bl	8001e18 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e160      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f000 faba 	bl	8003828 <RCC_Delay>
 80032b4:	e01c      	b.n	80032f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_RCC_OscConfig+0x274>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fdac 	bl	8001e18 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fe fda8 	bl	8001e18 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d908      	bls.n	80032e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e146      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	42420000 	.word	0x42420000
 80032e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b92      	ldr	r3, [pc, #584]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e9      	bne.n	80032c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a6 	beq.w	800344a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b8b      	ldr	r3, [pc, #556]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a87      	ldr	r2, [pc, #540]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b85      	ldr	r3, [pc, #532]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b82      	ldr	r3, [pc, #520]	@ (8003534 <HAL_RCC_OscConfig+0x4c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b7f      	ldr	r3, [pc, #508]	@ (8003534 <HAL_RCC_OscConfig+0x4c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7e      	ldr	r2, [pc, #504]	@ (8003534 <HAL_RCC_OscConfig+0x4c8>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe fd69 	bl	8001e18 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fe fd65 	bl	8001e18 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	@ 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e103      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b75      	ldr	r3, [pc, #468]	@ (8003534 <HAL_RCC_OscConfig+0x4c8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x312>
 8003370:	4b6f      	ldr	r3, [pc, #444]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a6e      	ldr	r2, [pc, #440]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	e02d      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x334>
 8003386:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a69      	ldr	r2, [pc, #420]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a66      	ldr	r2, [pc, #408]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	e01c      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x356>
 80033a8:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a60      	ldr	r2, [pc, #384]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fd19 	bl	8001e18 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fd15 	bl	8001e18 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0b1      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCC_OscConfig+0x37e>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fe fd03 	bl	8001e18 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fe fcff 	bl	8001e18 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e09b      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	4b40      	ldr	r3, [pc, #256]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4a3b      	ldr	r2, [pc, #236]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8087 	beq.w	8003562 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003454:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d061      	beq.n	8003524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d146      	bne.n	80034f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b33      	ldr	r3, [pc, #204]	@ (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fcd3 	bl	8001e18 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe fccf 	bl	8001e18 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e06d      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349c:	d108      	bne.n	80034b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800349e:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4921      	ldr	r1, [pc, #132]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a19      	ldr	r1, [r3, #32]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	430b      	orrs	r3, r1
 80034c2:	491b      	ldr	r1, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fca3 	bl	8001e18 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fc9f 	bl	8001e18 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e03d      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x46a>
 80034f4:	e035      	b.n	8003562 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fc8c 	bl	8001e18 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fc88 	bl	8001e18 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e026      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x498>
 8003522:	e01e      	b.n	8003562 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d107      	bne.n	800353c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e019      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_OscConfig+0x500>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	429a      	cmp	r2, r3
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000

08003570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0d0      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b6a      	ldr	r3, [pc, #424]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b67      	ldr	r3, [pc, #412]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4965      	ldr	r1, [pc, #404]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a58      	ldr	r2, [pc, #352]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d040      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d115      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e073      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3d      	ldr	r3, [pc, #244]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4936      	ldr	r1, [pc, #216]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe fbda 	bl	8001e18 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fbd6 	bl	8001e18 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e053      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2d      	ldr	r3, [pc, #180]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b27      	ldr	r3, [pc, #156]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d210      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4922      	ldr	r1, [pc, #136]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1cc>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_ClockConfig+0x1d0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fb38 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
 8003738:	08004c78 	.word	0x08004c78
 800373c:	20000004 	.word	0x20000004
 8003740:	20000008 	.word	0x20000008

08003744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800375e:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d002      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x30>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d003      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x36>
 8003772:	e027      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003776:	613b      	str	r3, [r7, #16]
      break;
 8003778:	e027      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0c9b      	lsrs	r3, r3, #18
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003792:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0c5b      	lsrs	r3, r3, #17
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 80037a6:	fb03 f202 	mul.w	r2, r3, r2
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e004      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	613b      	str	r3, [r7, #16]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 80037c6:	613b      	str	r3, [r7, #16]
      break;
 80037c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ca:	693b      	ldr	r3, [r7, #16]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	007a1200 	.word	0x007a1200
 80037e0:	08004c90 	.word	0x08004c90
 80037e4:	08004ca0 	.word	0x08004ca0
 80037e8:	003d0900 	.word	0x003d0900

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b02      	ldr	r3, [pc, #8]	@ (80037fc <HAL_RCC_GetHCLKFreq+0x10>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003804:	f7ff fff2 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0adb      	lsrs	r3, r3, #11
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	@ (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08004c88 	.word	0x08004c88

08003828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <RCC_Delay+0x34>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <RCC_Delay+0x38>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a5b      	lsrs	r3, r3, #9
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003844:	bf00      	nop
  }
  while (Delay --);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	60fa      	str	r2, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <RCC_Delay+0x1c>
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000004 	.word	0x20000004
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d07d      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003884:	4b4f      	ldr	r3, [pc, #316]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b4c      	ldr	r3, [pc, #304]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a4b      	ldr	r2, [pc, #300]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389a:	61d3      	str	r3, [r2, #28]
 800389c:	4b49      	ldr	r3, [pc, #292]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	4b46      	ldr	r3, [pc, #280]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d118      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b8:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a42      	ldr	r2, [pc, #264]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c4:	f7fe faa8 	bl	8001e18 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe faa4 	bl	8001e18 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e06d      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b3a      	ldr	r3, [pc, #232]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ea:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	429a      	cmp	r2, r3
 8003906:	d027      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003910:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003918:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800391e:	4a29      	ldr	r2, [pc, #164]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d014      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7fe fa73 	bl	8001e18 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fe fa6f 	bl	8001e18 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003944:	4293      	cmp	r3, r2
 8003946:	d901      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e036      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ee      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003958:	4b1a      	ldr	r3, [pc, #104]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4917      	ldr	r1, [pc, #92]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	4313      	orrs	r3, r2
 8003968:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800397a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	490b      	ldr	r1, [pc, #44]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a6:	4b07      	ldr	r3, [pc, #28]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4904      	ldr	r1, [pc, #16]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
 80039cc:	42420440 	.word	0x42420440

080039d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	f200 808a 	bhi.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d045      	beq.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d075      	beq.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a06:	e082      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a08:	4b46      	ldr	r3, [pc, #280]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a0e:	4b45      	ldr	r3, [pc, #276]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07b      	beq.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0c9b      	lsrs	r3, r3, #18
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	4a41      	ldr	r2, [pc, #260]	@ (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a32:	4b3c      	ldr	r3, [pc, #240]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0c5b      	lsrs	r3, r3, #17
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a4c:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4a34      	ldr	r2, [pc, #208]	@ (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a68:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a74:	d102      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	61bb      	str	r3, [r7, #24]
      break;
 8003a7a:	e04a      	b.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4a2d      	ldr	r2, [pc, #180]	@ (8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
      break;
 8003a8a:	e042      	b.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a9c:	d108      	bne.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e01f      	b.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003ac8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	e00f      	b.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ada:	d11c      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d016      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ae8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003aec:	61bb      	str	r3, [r7, #24]
      break;
 8003aee:	e012      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003af0:	e011      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003af2:	f7ff fe85 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0b9b      	lsrs	r3, r3, #14
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	61bb      	str	r3, [r7, #24]
      break;
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b16:	bf00      	nop
    }
  }
  return (frequency);
 8003b18:	69bb      	ldr	r3, [r7, #24]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	08004ca4 	.word	0x08004ca4
 8003b2c:	08004cb4 	.word	0x08004cb4
 8003b30:	007a1200 	.word	0x007a1200
 8003b34:	003d0900 	.word	0x003d0900
 8003b38:	aaaaaaab 	.word	0xaaaaaaab

08003b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e041      	b.n	8003bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fff0 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f000 fc30 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d001      	beq.n	8003bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e03a      	b.n	8003c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_TIM_Base_Start_IT+0x98>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x58>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1e:	d009      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x58>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a14      	ldr	r2, [pc, #80]	@ (8003c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x58>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a13      	ldr	r2, [pc, #76]	@ (8003c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d010      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e007      	b.n	8003c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800

08003c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e041      	b.n	8003d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f839 	bl	8003d1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fb8e 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x24>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e022      	b.n	8003d9a <HAL_TIM_PWM_Start+0x6a>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d109      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x3e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e015      	b.n	8003d9a <HAL_TIM_PWM_Start+0x6a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d109      	bne.n	8003d88 <HAL_TIM_PWM_Start+0x58>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e008      	b.n	8003d9a <HAL_TIM_PWM_Start+0x6a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e05e      	b.n	8003e60 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0x82>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003db0:	e013      	b.n	8003dda <HAL_TIM_PWM_Start+0xaa>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x92>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dc0:	e00b      	b.n	8003dda <HAL_TIM_PWM_Start+0xaa>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xa2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd0:	e003      	b.n	8003dda <HAL_TIM_PWM_Start+0xaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fd7c 	bl	80048e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <HAL_TIM_PWM_Start+0x138>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <HAL_TIM_PWM_Start+0x138>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_TIM_PWM_Start+0xfa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e14:	d009      	beq.n	8003e2a <HAL_TIM_PWM_Start+0xfa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <HAL_TIM_PWM_Start+0x13c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_TIM_PWM_Start+0xfa>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <HAL_TIM_PWM_Start+0x140>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d010      	beq.n	8003e5e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	e007      	b.n	8003e5e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa76 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa69 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa78 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa4c 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa3f 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fa4e 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa22 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa15 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa24 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f9f8 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9eb 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f9fa 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fcf0 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fce9 	bl	80049f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b40      	cmp	r3, #64	@ 0x40
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9be 	bl	80043cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fcb4 	bl	80049e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e0ae      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	f200 809f 	bhi.w	80041f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040b2:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080041f1 	.word	0x080041f1
 80040c0:	080041f1 	.word	0x080041f1
 80040c4:	080041f1 	.word	0x080041f1
 80040c8:	0800412d 	.word	0x0800412d
 80040cc:	080041f1 	.word	0x080041f1
 80040d0:	080041f1 	.word	0x080041f1
 80040d4:	080041f1 	.word	0x080041f1
 80040d8:	0800416f 	.word	0x0800416f
 80040dc:	080041f1 	.word	0x080041f1
 80040e0:	080041f1 	.word	0x080041f1
 80040e4:	080041f1 	.word	0x080041f1
 80040e8:	080041af 	.word	0x080041af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f9d6 	bl	80044a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0204 	bic.w	r2, r2, #4
 8004116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6999      	ldr	r1, [r3, #24]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	619a      	str	r2, [r3, #24]
      break;
 800412a:	e064      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fa1c 	bl	8004570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	619a      	str	r2, [r3, #24]
      break;
 800416c:	e043      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fa65 	bl	8004644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0208 	orr.w	r2, r2, #8
 8004188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0204 	bic.w	r2, r2, #4
 8004198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69d9      	ldr	r1, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	61da      	str	r2, [r3, #28]
      break;
 80041ac:	e023      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 faaf 	bl	8004718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69d9      	ldr	r1, [r3, #28]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	021a      	lsls	r2, r3, #8
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	61da      	str	r2, [r3, #28]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	75fb      	strb	r3, [r7, #23]
      break;
 80041f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e0b4      	b.n	800438e <HAL_TIM_ConfigClockSource+0x186>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800424a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800425c:	d03e      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0xd4>
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004262:	f200 8087 	bhi.w	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426a:	f000 8086 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x172>
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004272:	d87f      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b70      	cmp	r3, #112	@ 0x70
 8004276:	d01a      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xa6>
 8004278:	2b70      	cmp	r3, #112	@ 0x70
 800427a:	d87b      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b60      	cmp	r3, #96	@ 0x60
 800427e:	d050      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x11a>
 8004280:	2b60      	cmp	r3, #96	@ 0x60
 8004282:	d877      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b50      	cmp	r3, #80	@ 0x50
 8004286:	d03c      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xfa>
 8004288:	2b50      	cmp	r3, #80	@ 0x50
 800428a:	d873      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	d058      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x13a>
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d86f      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b30      	cmp	r3, #48	@ 0x30
 8004296:	d064      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b30      	cmp	r3, #48	@ 0x30
 800429a:	d86b      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d060      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d867      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d05c      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d05a      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	e062      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042be:	f000 faf0 	bl	80048a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	609a      	str	r2, [r3, #8]
      break;
 80042da:	e04f      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ec:	f000 fad9 	bl	80048a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042fe:	609a      	str	r2, [r3, #8]
      break;
 8004300:	e03c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	461a      	mov	r2, r3
 8004310:	f000 fa50 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2150      	movs	r1, #80	@ 0x50
 800431a:	4618      	mov	r0, r3
 800431c:	f000 faa7 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8004320:	e02c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	461a      	mov	r2, r3
 8004330:	f000 fa6e 	bl	8004810 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2160      	movs	r1, #96	@ 0x60
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fa97 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8004340:	e01c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	461a      	mov	r2, r3
 8004350:	f000 fa30 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2140      	movs	r1, #64	@ 0x40
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa87 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8004360:	e00c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f000 fa7e 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8004372:	e003      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e000      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800437a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a29      	ldr	r2, [pc, #164]	@ (8004498 <TIM_Base_SetConfig+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a26      	ldr	r2, [pc, #152]	@ (800449c <TIM_Base_SetConfig+0xbc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a25      	ldr	r2, [pc, #148]	@ (80044a0 <TIM_Base_SetConfig+0xc0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1c      	ldr	r2, [pc, #112]	@ (8004498 <TIM_Base_SetConfig+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a19      	ldr	r2, [pc, #100]	@ (800449c <TIM_Base_SetConfig+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <TIM_Base_SetConfig+0xc0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <TIM_Base_SetConfig+0xb8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	615a      	str	r2, [r3, #20]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800

080044a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f023 0201 	bic.w	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 0302 	bic.w	r3, r3, #2
 80044ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1c      	ldr	r2, [pc, #112]	@ (800456c <TIM_OC1_SetConfig+0xc8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10c      	bne.n	800451a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0308 	bic.w	r3, r3, #8
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 0304 	bic.w	r3, r3, #4
 8004518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a13      	ldr	r2, [pc, #76]	@ (800456c <TIM_OC1_SetConfig+0xc8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d111      	bne.n	8004546 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00

08004570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0210 	bic.w	r2, r3, #16
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0320 	bic.w	r3, r3, #32
 80045ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <TIM_OC2_SetConfig+0xd0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10d      	bne.n	80045ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a14      	ldr	r2, [pc, #80]	@ (8004640 <TIM_OC2_SetConfig+0xd0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d113      	bne.n	800461c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00

08004644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800468c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1d      	ldr	r2, [pc, #116]	@ (8004714 <TIM_OC3_SetConfig+0xd0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10d      	bne.n	80046be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a14      	ldr	r2, [pc, #80]	@ (8004714 <TIM_OC3_SetConfig+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00

08004718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0f      	ldr	r2, [pc, #60]	@ (80047b0 <TIM_OC4_SetConfig+0x98>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d109      	bne.n	800478c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800477e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	40012c00 	.word	0x40012c00

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0210 	bic.w	r2, r3, #16
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	031b      	lsls	r3, r3, #12
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	621a      	str	r2, [r3, #32]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	f043 0307 	orr.w	r3, r3, #7
 8004890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	021a      	lsls	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2201      	movs	r2, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e046      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a12      	ldr	r2, [pc, #72]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800

080049e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <memset>:
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4402      	add	r2, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	@ (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000010 	.word	0x20000010

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	2600      	movs	r6, #0
 8004a28:	4d0c      	ldr	r5, [pc, #48]	@ (8004a5c <__libc_init_array+0x38>)
 8004a2a:	4c0d      	ldr	r4, [pc, #52]	@ (8004a60 <__libc_init_array+0x3c>)
 8004a2c:	1b64      	subs	r4, r4, r5
 8004a2e:	10a4      	asrs	r4, r4, #2
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	f000 f914 	bl	8004c60 <_init>
 8004a38:	2600      	movs	r6, #0
 8004a3a:	4d0a      	ldr	r5, [pc, #40]	@ (8004a64 <__libc_init_array+0x40>)
 8004a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a68 <__libc_init_array+0x44>)
 8004a3e:	1b64      	subs	r4, r4, r5
 8004a40:	10a4      	asrs	r4, r4, #2
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	08004cb8 	.word	0x08004cb8
 8004a60:	08004cb8 	.word	0x08004cb8
 8004a64:	08004cb8 	.word	0x08004cb8
 8004a68:	08004cbc 	.word	0x08004cbc

08004a6c <sqrt>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	4606      	mov	r6, r0
 8004a70:	460f      	mov	r7, r1
 8004a72:	f000 f81f 	bl	8004ab4 <__ieee754_sqrt>
 8004a76:	4632      	mov	r2, r6
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	4639      	mov	r1, r7
 8004a82:	f7fb ffb9 	bl	80009f8 <__aeabi_dcmpun>
 8004a86:	b990      	cbnz	r0, 8004aae <sqrt+0x42>
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f7fb ff8a 	bl	80009a8 <__aeabi_dcmplt>
 8004a94:	b158      	cbz	r0, 8004aae <sqrt+0x42>
 8004a96:	f7ff ffbf 	bl	8004a18 <__errno>
 8004a9a:	2321      	movs	r3, #33	@ 0x21
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	6003      	str	r3, [r0, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f7fb fe37 	bl	8000718 <__aeabi_ddiv>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	460d      	mov	r5, r1
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ab4 <__ieee754_sqrt>:
 8004ab4:	4a67      	ldr	r2, [pc, #412]	@ (8004c54 <__ieee754_sqrt+0x1a0>)
 8004ab6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	438a      	bics	r2, r1
 8004abc:	4606      	mov	r6, r0
 8004abe:	460f      	mov	r7, r1
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	d10e      	bne.n	8004ae4 <__ieee754_sqrt+0x30>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	f7fb fcfc 	bl	80004c4 <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f7fb fb40 	bl	8000158 <__adddf3>
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460f      	mov	r7, r1
 8004adc:	4630      	mov	r0, r6
 8004ade:	4639      	mov	r1, r7
 8004ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	dc0c      	bgt.n	8004b02 <__ieee754_sqrt+0x4e>
 8004ae8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8004aec:	4302      	orrs	r2, r0
 8004aee:	d0f5      	beq.n	8004adc <__ieee754_sqrt+0x28>
 8004af0:	b189      	cbz	r1, 8004b16 <__ieee754_sqrt+0x62>
 8004af2:	4602      	mov	r2, r0
 8004af4:	f7fb fb2e 	bl	8000154 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	f7fb fe0c 	bl	8000718 <__aeabi_ddiv>
 8004b00:	e7ea      	b.n	8004ad8 <__ieee754_sqrt+0x24>
 8004b02:	150a      	asrs	r2, r1, #20
 8004b04:	d115      	bne.n	8004b32 <__ieee754_sqrt+0x7e>
 8004b06:	2100      	movs	r1, #0
 8004b08:	e009      	b.n	8004b1e <__ieee754_sqrt+0x6a>
 8004b0a:	0ae3      	lsrs	r3, r4, #11
 8004b0c:	3a15      	subs	r2, #21
 8004b0e:	0564      	lsls	r4, r4, #21
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0fa      	beq.n	8004b0a <__ieee754_sqrt+0x56>
 8004b14:	e7f7      	b.n	8004b06 <__ieee754_sqrt+0x52>
 8004b16:	460a      	mov	r2, r1
 8004b18:	e7fa      	b.n	8004b10 <__ieee754_sqrt+0x5c>
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	3101      	adds	r1, #1
 8004b1e:	02d8      	lsls	r0, r3, #11
 8004b20:	d5fb      	bpl.n	8004b1a <__ieee754_sqrt+0x66>
 8004b22:	1e48      	subs	r0, r1, #1
 8004b24:	1a12      	subs	r2, r2, r0
 8004b26:	f1c1 0020 	rsb	r0, r1, #32
 8004b2a:	fa24 f000 	lsr.w	r0, r4, r0
 8004b2e:	4303      	orrs	r3, r0
 8004b30:	408c      	lsls	r4, r1
 8004b32:	2600      	movs	r6, #0
 8004b34:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8004b38:	2116      	movs	r1, #22
 8004b3a:	07d2      	lsls	r2, r2, #31
 8004b3c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004b40:	4632      	mov	r2, r6
 8004b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b4a:	bf5c      	itt	pl
 8004b4c:	005b      	lslpl	r3, r3, #1
 8004b4e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004b52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b56:	bf58      	it	pl
 8004b58:	0064      	lslpl	r4, r4, #1
 8004b5a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004b5e:	107f      	asrs	r7, r7, #1
 8004b60:	0064      	lsls	r4, r4, #1
 8004b62:	1815      	adds	r5, r2, r0
 8004b64:	429d      	cmp	r5, r3
 8004b66:	bfde      	ittt	le
 8004b68:	182a      	addle	r2, r5, r0
 8004b6a:	1b5b      	suble	r3, r3, r5
 8004b6c:	1836      	addle	r6, r6, r0
 8004b6e:	0fe5      	lsrs	r5, r4, #31
 8004b70:	3901      	subs	r1, #1
 8004b72:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004b76:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004b7a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004b7e:	d1f0      	bne.n	8004b62 <__ieee754_sqrt+0xae>
 8004b80:	460d      	mov	r5, r1
 8004b82:	f04f 0a20 	mov.w	sl, #32
 8004b86:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	eb01 0c00 	add.w	ip, r1, r0
 8004b90:	db02      	blt.n	8004b98 <__ieee754_sqrt+0xe4>
 8004b92:	d113      	bne.n	8004bbc <__ieee754_sqrt+0x108>
 8004b94:	45a4      	cmp	ip, r4
 8004b96:	d811      	bhi.n	8004bbc <__ieee754_sqrt+0x108>
 8004b98:	f1bc 0f00 	cmp.w	ip, #0
 8004b9c:	eb0c 0100 	add.w	r1, ip, r0
 8004ba0:	da42      	bge.n	8004c28 <__ieee754_sqrt+0x174>
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	db40      	blt.n	8004c28 <__ieee754_sqrt+0x174>
 8004ba6:	f102 0e01 	add.w	lr, r2, #1
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	4672      	mov	r2, lr
 8004bae:	45a4      	cmp	ip, r4
 8004bb0:	bf88      	it	hi
 8004bb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004bb6:	eba4 040c 	sub.w	r4, r4, ip
 8004bba:	4405      	add	r5, r0
 8004bbc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8004bc0:	f1ba 0a01 	subs.w	sl, sl, #1
 8004bc4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8004bc8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004bcc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004bd0:	d1db      	bne.n	8004b8a <__ieee754_sqrt+0xd6>
 8004bd2:	431c      	orrs	r4, r3
 8004bd4:	d01a      	beq.n	8004c0c <__ieee754_sqrt+0x158>
 8004bd6:	4c20      	ldr	r4, [pc, #128]	@ (8004c58 <__ieee754_sqrt+0x1a4>)
 8004bd8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8004c5c <__ieee754_sqrt+0x1a8>
 8004bdc:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004be0:	e9db 2300 	ldrd	r2, r3, [fp]
 8004be4:	f7fb fab6 	bl	8000154 <__aeabi_dsub>
 8004be8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb fee2 	bl	80009bc <__aeabi_dcmple>
 8004bf8:	b140      	cbz	r0, 8004c0c <__ieee754_sqrt+0x158>
 8004bfa:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004bfe:	e9db 2300 	ldrd	r2, r3, [fp]
 8004c02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c06:	d111      	bne.n	8004c2c <__ieee754_sqrt+0x178>
 8004c08:	4655      	mov	r5, sl
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	1072      	asrs	r2, r6, #1
 8004c0e:	086b      	lsrs	r3, r5, #1
 8004c10:	07f1      	lsls	r1, r6, #31
 8004c12:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004c16:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004c1a:	bf48      	it	mi
 8004c1c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004c20:	4618      	mov	r0, r3
 8004c22:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8004c26:	e757      	b.n	8004ad8 <__ieee754_sqrt+0x24>
 8004c28:	4696      	mov	lr, r2
 8004c2a:	e7be      	b.n	8004baa <__ieee754_sqrt+0xf6>
 8004c2c:	f7fb fa94 	bl	8000158 <__adddf3>
 8004c30:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb feb4 	bl	80009a8 <__aeabi_dcmplt>
 8004c40:	b120      	cbz	r0, 8004c4c <__ieee754_sqrt+0x198>
 8004c42:	1ca8      	adds	r0, r5, #2
 8004c44:	bf08      	it	eq
 8004c46:	3601      	addeq	r6, #1
 8004c48:	3502      	adds	r5, #2
 8004c4a:	e7df      	b.n	8004c0c <__ieee754_sqrt+0x158>
 8004c4c:	1c6b      	adds	r3, r5, #1
 8004c4e:	f023 0501 	bic.w	r5, r3, #1
 8004c52:	e7db      	b.n	8004c0c <__ieee754_sqrt+0x158>
 8004c54:	7ff00000 	.word	0x7ff00000
 8004c58:	20000068 	.word	0x20000068
 8004c5c:	20000060 	.word	0x20000060

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
